
TP2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000014aa  0000153e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080012e  0080012e  0000156c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002150  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1a  00000000  00000000  00003924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000159a  00000000  00000000  0000473e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00005cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ca  00000000  00000000  00006921  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00007ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
       4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_14>
      3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ea ea       	ldi	r30, 0xAA	; 170
      bc:	f4 e1       	ldi	r31, 0x14	; 20
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	ae 32       	cpi	r26, 0x2E	; 46
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	ae e2       	ldi	r26, 0x2E	; 46
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a5 35       	cpi	r26, 0x55	; 85
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	0e 94 1d 04 	call	0x83a	; 0x83a <main>
      de:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <_exit>

000000e2 <__bad_interrupt>:
      e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <init>:

static uint8_t counter = 0;

void init(void)
{
	DDRC = 0xFF;
      e6:	8f ef       	ldi	r24, 0xFF	; 255
      e8:	87 b9       	out	0x07, r24	; 7
	TCCR0A = (1 << WGM01);
      ea:	82 e0       	ldi	r24, 0x02	; 2
      ec:	84 bd       	out	0x24, r24	; 36
	OCR0A = 156; //0.01 sec
      ee:	9c e9       	ldi	r25, 0x9C	; 156
      f0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A);
      f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = (1 << CS02) | (1 << CS00); // prescaler 1024
      f6:	85 e0       	ldi	r24, 0x05	; 5
      f8:	85 bd       	out	0x25, r24	; 37
	sei();
      fa:	78 94       	sei
      fc:	08 95       	ret

000000fe <not_leap>:
	sEOS_Planificador();
}

char not_leap(void)      //check for leap year
{
	if (!(t.year%100))
      fe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_start+0x5>
     102:	89 e2       	ldi	r24, 0x29	; 41
     104:	98 9f       	mul	r25, r24
     106:	81 2d       	mov	r24, r1
     108:	11 24       	eor	r1, r1
     10a:	82 95       	swap	r24
     10c:	8f 70       	andi	r24, 0x0F	; 15
     10e:	24 e6       	ldi	r18, 0x64	; 100
     110:	82 9f       	mul	r24, r18
     112:	90 19       	sub	r25, r0
     114:	11 24       	eor	r1, r1
     116:	91 11       	cpse	r25, r1
     118:	08 c0       	rjmp	.+16     	; 0x12a <not_leap+0x2c>
	{
		return (char)(t.year%400);
     11a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_start+0x5>
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	60 e9       	ldi	r22, 0x90	; 144
     122:	71 e0       	ldi	r23, 0x01	; 1
     124:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
     128:	08 95       	ret
	}
	else
	{
		return (char)(t.year%4);
     12a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_start+0x5>
     12e:	83 70       	andi	r24, 0x03	; 3
	}
}
     130:	08 95       	ret

00000132 <__vector_14>:
	sei();
}


ISR(TIMER0_COMPA_vect)
{
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	4f 93       	push	r20
     142:	5f 93       	push	r21
     144:	6f 93       	push	r22
     146:	7f 93       	push	r23
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	af 93       	push	r26
     14e:	bf 93       	push	r27
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31
	counter++;
     154:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     158:	8f 5f       	subi	r24, 0xFF	; 255
     15a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	if(counter > 100){
     15e:	85 36       	cpi	r24, 0x65	; 101
     160:	08 f4       	brcc	.+2      	; 0x164 <__vector_14+0x32>
     162:	6e c0       	rjmp	.+220    	; 0x240 <__vector_14+0x10e>
		if (++t.second==60)
     164:	e0 e0       	ldi	r30, 0x00	; 0
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	80 81       	ld	r24, Z
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 83       	st	Z, r24
     16e:	8c 33       	cpi	r24, 0x3C	; 60
     170:	09 f0       	breq	.+2      	; 0x174 <__vector_14+0x42>
     172:	64 c0       	rjmp	.+200    	; 0x23c <__vector_14+0x10a>
		{
			t.second=0;
     174:	10 82       	st	Z, r1
			if (++t.minute==60)
     176:	81 81       	ldd	r24, Z+1	; 0x01
     178:	8f 5f       	subi	r24, 0xFF	; 255
     17a:	81 83       	std	Z+1, r24	; 0x01
     17c:	8c 33       	cpi	r24, 0x3C	; 60
     17e:	09 f0       	breq	.+2      	; 0x182 <__vector_14+0x50>
     180:	5d c0       	rjmp	.+186    	; 0x23c <__vector_14+0x10a>
			{
				t.minute=0;
     182:	11 82       	std	Z+1, r1	; 0x01
				if (++t.hour==24)
     184:	82 81       	ldd	r24, Z+2	; 0x02
     186:	8f 5f       	subi	r24, 0xFF	; 255
     188:	82 83       	std	Z+2, r24	; 0x02
     18a:	88 31       	cpi	r24, 0x18	; 24
     18c:	09 f0       	breq	.+2      	; 0x190 <__vector_14+0x5e>
     18e:	56 c0       	rjmp	.+172    	; 0x23c <__vector_14+0x10a>
				{
					t.hour=0;
     190:	12 82       	std	Z+2, r1	; 0x02
					if (++t.date==32)
     192:	83 81       	ldd	r24, Z+3	; 0x03
     194:	8f 5f       	subi	r24, 0xFF	; 255
     196:	83 83       	std	Z+3, r24	; 0x03
     198:	80 32       	cpi	r24, 0x20	; 32
     19a:	31 f4       	brne	.+12     	; 0x1a8 <__vector_14+0x76>
					{
						t.month++;
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	8f 5f       	subi	r24, 0xFF	; 255
     1a0:	84 83       	std	Z+4, r24	; 0x04
						t.date=1;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	83 83       	std	Z+3, r24	; 0x03
     1a6:	3f c0       	rjmp	.+126    	; 0x226 <__vector_14+0xf4>
					}
					else if (t.date==31)
     1a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     1ac:	8f 31       	cpi	r24, 0x1F	; 31
     1ae:	c1 f4       	brne	.+48     	; 0x1e0 <__vector_14+0xae>
					{
						if ((t.month==4) || (t.month==6) || (t.month==9) || (t.month==11))
     1b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     1b4:	84 30       	cpi	r24, 0x04	; 4
     1b6:	61 f0       	breq	.+24     	; 0x1d0 <__vector_14+0x9e>
     1b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     1bc:	86 30       	cpi	r24, 0x06	; 6
     1be:	41 f0       	breq	.+16     	; 0x1d0 <__vector_14+0x9e>
     1c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     1c4:	89 30       	cpi	r24, 0x09	; 9
     1c6:	21 f0       	breq	.+8      	; 0x1d0 <__vector_14+0x9e>
     1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     1cc:	8b 30       	cpi	r24, 0x0B	; 11
     1ce:	59 f5       	brne	.+86     	; 0x226 <__vector_14+0xf4>
						{
							t.month++;
     1d0:	e0 e0       	ldi	r30, 0x00	; 0
     1d2:	f1 e0       	ldi	r31, 0x01	; 1
     1d4:	84 81       	ldd	r24, Z+4	; 0x04
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	84 83       	std	Z+4, r24	; 0x04
							t.date=1;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	83 83       	std	Z+3, r24	; 0x03
     1de:	23 c0       	rjmp	.+70     	; 0x226 <__vector_14+0xf4>
						}
					}
					else if (t.date==30)
     1e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     1e4:	8e 31       	cpi	r24, 0x1E	; 30
     1e6:	61 f4       	brne	.+24     	; 0x200 <__vector_14+0xce>
					{
						if(t.month==2)
     1e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	d9 f4       	brne	.+54     	; 0x226 <__vector_14+0xf4>
						{
							t.month++;
     1f0:	e0 e0       	ldi	r30, 0x00	; 0
     1f2:	f1 e0       	ldi	r31, 0x01	; 1
     1f4:	84 81       	ldd	r24, Z+4	; 0x04
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	84 83       	std	Z+4, r24	; 0x04
							t.date=1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	83 83       	std	Z+3, r24	; 0x03
     1fe:	13 c0       	rjmp	.+38     	; 0x226 <__vector_14+0xf4>
						}
					}
					else if (t.date==29)
     200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     204:	8d 31       	cpi	r24, 0x1D	; 29
     206:	79 f4       	brne	.+30     	; 0x226 <__vector_14+0xf4>
					{
						if((t.month==2) && (not_leap()))
     208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	59 f4       	brne	.+22     	; 0x226 <__vector_14+0xf4>
     210:	0e 94 7f 00 	call	0xfe	; 0xfe <not_leap>
     214:	88 23       	and	r24, r24
     216:	39 f0       	breq	.+14     	; 0x226 <__vector_14+0xf4>
						{
							t.month++;
     218:	e0 e0       	ldi	r30, 0x00	; 0
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	84 81       	ldd	r24, Z+4	; 0x04
     21e:	8f 5f       	subi	r24, 0xFF	; 255
     220:	84 83       	std	Z+4, r24	; 0x04
							t.date=1;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (t.month==13)
     226:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
     22a:	8d 30       	cpi	r24, 0x0D	; 13
     22c:	39 f4       	brne	.+14     	; 0x23c <__vector_14+0x10a>
					{
						t.month=1;
     22e:	e0 e0       	ldi	r30, 0x00	; 0
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	84 83       	std	Z+4, r24	; 0x04
						t.year++;
     236:	85 81       	ldd	r24, Z+5	; 0x05
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	85 83       	std	Z+5, r24	; 0x05
					}
				}
			}
		}

		counter = 0;
     23c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	}
	sEOS_Planificador();
     240:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <sEOS_Planificador>
}
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti

00000266 <obtenerTime>:
	{
		return (char)(t.year%4);
	}
}

time obtenerTime(void){
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	00 d0       	rcall	.+0      	; 0x26c <obtenerTime+0x6>
     26c:	00 d0       	rcall	.+0      	; 0x26e <obtenerTime+0x8>
     26e:	00 d0       	rcall	.+0      	; 0x270 <obtenerTime+0xa>
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
	return t;
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	e0 e0       	ldi	r30, 0x00	; 0
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	de 01       	movw	r26, r28
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	01 90       	ld	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	8a 95       	dec	r24
     284:	e1 f7       	brne	.-8      	; 0x27e <obtenerTime+0x18>
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	3a 81       	ldd	r19, Y+2	; 0x02
     28a:	4b 81       	ldd	r20, Y+3	; 0x03
     28c:	5c 81       	ldd	r21, Y+4	; 0x04
     28e:	6d 81       	ldd	r22, Y+5	; 0x05
     290:	7e 81       	ldd	r23, Y+6	; 0x06
}
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	26 96       	adiw	r28, 0x06	; 6
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <setearTime>:

void setearTime(time newTime){
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <setearTime+0x6>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <setearTime+0x8>
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <setearTime+0xa>
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	49 83       	std	Y+1, r20	; 0x01
     2b8:	5a 83       	std	Y+2, r21	; 0x02
     2ba:	6b 83       	std	Y+3, r22	; 0x03
     2bc:	7c 83       	std	Y+4, r23	; 0x04
     2be:	8d 83       	std	Y+5, r24	; 0x05
     2c0:	9e 83       	std	Y+6, r25	; 0x06
	t=newTime;
     2c2:	86 e0       	ldi	r24, 0x06	; 6
     2c4:	fe 01       	movw	r30, r28
     2c6:	31 96       	adiw	r30, 0x01	; 1
     2c8:	a0 e0       	ldi	r26, 0x00	; 0
     2ca:	b1 e0       	ldi	r27, 0x01	; 1
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	8a 95       	dec	r24
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <setearTime+0x24>
     2d4:	26 96       	adiw	r28, 0x06	; 6
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <KEYPAD_Scan>:
	{'*','#','0','D'}
};

static uint8_t tecla;

uint8_t KEYPAD_Scan (uint8_t *key){
     2e6:	fc 01       	movw	r30, r24
	uint8_t c;
	
	PORTB|= 0x19; //00011001 PB4,3,0 en salida
     2e8:	95 b1       	in	r25, 0x05	; 5
     2ea:	99 61       	ori	r25, 0x19	; 25
     2ec:	95 b9       	out	0x05, r25	; 5
	PORTD|= 0x80; //10000000 D2,3,4,5 en entrada, RS en 1 -> cambiado a 0 por errores
     2ee:	9b b1       	in	r25, 0x0b	; 11
     2f0:	90 68       	ori	r25, 0x80	; 128
     2f2:	9b b9       	out	0x0b, r25	; 11
	//DDRB|=(0x6); //00110
	for (c=0;c<4;c++)
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	3e c0       	rjmp	.+124    	; 0x374 <KEYPAD_Scan+0x8e>
	{
		DDRD&=~(0x3C); //00111100
     2f8:	2a b1       	in	r18, 0x0a	; 10
     2fa:	23 7c       	andi	r18, 0xC3	; 195
     2fc:	2a b9       	out	0x0a, r18	; 10
		DDRD|=(0X20>>c); //00100000 Movimiento en columnas
     2fe:	4a b1       	in	r20, 0x0a	; 10
     300:	69 2f       	mov	r22, r25
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	20 e2       	ldi	r18, 0x20	; 32
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	09 2e       	mov	r0, r25
     30a:	02 c0       	rjmp	.+4      	; 0x310 <KEYPAD_Scan+0x2a>
     30c:	35 95       	asr	r19
     30e:	27 95       	ror	r18
     310:	0a 94       	dec	r0
     312:	e2 f7       	brpl	.-8      	; 0x30c <KEYPAD_Scan+0x26>
     314:	24 2b       	or	r18, r20
     316:	2a b9       	out	0x0a, r18	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	af e9       	ldi	r26, 0x9F	; 159
     31a:	bf e0       	ldi	r27, 0x0F	; 15
     31c:	11 97       	sbiw	r26, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <KEYPAD_Scan+0x36>
     320:	00 c0       	rjmp	.+0      	; 0x322 <KEYPAD_Scan+0x3c>
     322:	00 00       	nop
		_delay_ms(1);
		if(!(PINB&(0x10))){ //00010000
     324:	1c 99       	sbic	0x03, 4	; 3
     326:	07 c0       	rjmp	.+14     	; 0x336 <KEYPAD_Scan+0x50>
			*key = keypad[0][c];
     328:	db 01       	movw	r26, r22
     32a:	a2 5e       	subi	r26, 0xE2	; 226
     32c:	be 4f       	sbci	r27, 0xFE	; 254
     32e:	8c 91       	ld	r24, X
     330:	80 83       	st	Z, r24
			return 1;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	08 95       	ret
		}
		if(!(PINB&(0x08))){
     336:	1b 99       	sbic	0x03, 3	; 3
     338:	08 c0       	rjmp	.+16     	; 0x34a <KEYPAD_Scan+0x64>
			*key = keypad[1][c];
     33a:	db 01       	movw	r26, r22
     33c:	a2 5e       	subi	r26, 0xE2	; 226
     33e:	be 4f       	sbci	r27, 0xFE	; 254
     340:	14 96       	adiw	r26, 0x04	; 4
     342:	8c 91       	ld	r24, X
     344:	80 83       	st	Z, r24
			return 1;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	08 95       	ret
		}
		if(!(PINB&(0x1))){
     34a:	18 99       	sbic	0x03, 0	; 3
     34c:	08 c0       	rjmp	.+16     	; 0x35e <KEYPAD_Scan+0x78>
			*key = keypad[2][c];
     34e:	db 01       	movw	r26, r22
     350:	a2 5e       	subi	r26, 0xE2	; 226
     352:	be 4f       	sbci	r27, 0xFE	; 254
     354:	18 96       	adiw	r26, 0x08	; 8
     356:	8c 91       	ld	r24, X
     358:	80 83       	st	Z, r24
			return 1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	08 95       	ret
		}
		if(!(PIND&(0x80))){
     35e:	4f 99       	sbic	0x09, 7	; 9
     360:	08 c0       	rjmp	.+16     	; 0x372 <KEYPAD_Scan+0x8c>
			*key = keypad[3][c];
     362:	db 01       	movw	r26, r22
     364:	a2 5e       	subi	r26, 0xE2	; 226
     366:	be 4f       	sbci	r27, 0xFE	; 254
     368:	1c 96       	adiw	r26, 0x0c	; 12
     36a:	8c 91       	ld	r24, X
     36c:	80 83       	st	Z, r24
			return 1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	08 95       	ret
	uint8_t c;
	
	PORTB|= 0x19; //00011001 PB4,3,0 en salida
	PORTD|= 0x80; //10000000 D2,3,4,5 en entrada, RS en 1 -> cambiado a 0 por errores
	//DDRB|=(0x6); //00110
	for (c=0;c<4;c++)
     372:	9f 5f       	subi	r25, 0xFF	; 255
     374:	94 30       	cpi	r25, 0x04	; 4
     376:	08 f4       	brcc	.+2      	; 0x37a <KEYPAD_Scan+0x94>
     378:	bf cf       	rjmp	.-130    	; 0x2f8 <KEYPAD_Scan+0x12>
			*key = keypad[3][c];
			return 1;
		}
		
	}
	return 0;
     37a:	80 e0       	ldi	r24, 0x00	; 0
}
     37c:	08 95       	ret

0000037e <KEYPAD_Actualizar>:

void KEYPAD_Actualizar(void){ 
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	1f 92       	push	r1
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
	uint8_t key=' '; 
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	89 83       	std	Y+1, r24	; 0x01
	if(KEYPAD_Scan(&key)){  
     38c:	ce 01       	movw	r24, r28
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	0e 94 73 01 	call	0x2e6	; 0x2e6 <KEYPAD_Scan>
     394:	88 23       	and	r24, r24
     396:	21 f0       	breq	.+8      	; 0x3a0 <KEYPAD_Actualizar+0x22>
		tecla=key;  
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <tecla>
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <KEYPAD_Actualizar+0x26>
	} 
	else tecla=0;
     3a0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <tecla>
}
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <RetornarTecla>:

uint8_t RetornarTecla(void){
	return tecla;
     3ac:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <tecla>
     3b0:	08 95       	ret

000003b2 <LCDsendChar>:
     3b2:	65 b1       	in	r22, 0x05	; 5
     3b4:	98 2f       	mov	r25, r24
     3b6:	90 74       	andi	r25, 0x40	; 64
     3b8:	49 2f       	mov	r20, r25
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	55 95       	asr	r21
     3be:	47 95       	ror	r20
     3c0:	55 95       	asr	r21
     3c2:	47 95       	ror	r20
     3c4:	55 95       	asr	r21
     3c6:	47 95       	ror	r20
     3c8:	55 95       	asr	r21
     3ca:	47 95       	ror	r20
     3cc:	98 2f       	mov	r25, r24
     3ce:	90 78       	andi	r25, 0x80	; 128
     3d0:	29 2f       	mov	r18, r25
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	02 2e       	mov	r0, r18
     3d6:	23 2f       	mov	r18, r19
     3d8:	00 0c       	add	r0, r0
     3da:	22 1f       	adc	r18, r18
     3dc:	33 0b       	sbc	r19, r19
     3de:	00 0c       	add	r0, r0
     3e0:	22 1f       	adc	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	96 2f       	mov	r25, r22
     3e6:	99 7f       	andi	r25, 0xF9	; 249
     3e8:	49 2b       	or	r20, r25
     3ea:	24 2b       	or	r18, r20
     3ec:	25 b9       	out	0x05, r18	; 5
     3ee:	68 b1       	in	r22, 0x08	; 8
     3f0:	98 2f       	mov	r25, r24
     3f2:	90 71       	andi	r25, 0x10	; 16
     3f4:	49 2f       	mov	r20, r25
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	55 95       	asr	r21
     3fa:	47 95       	ror	r20
     3fc:	55 95       	asr	r21
     3fe:	47 95       	ror	r20
     400:	55 95       	asr	r21
     402:	47 95       	ror	r20
     404:	98 2f       	mov	r25, r24
     406:	90 72       	andi	r25, 0x20	; 32
     408:	29 2f       	mov	r18, r25
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	35 95       	asr	r19
     40e:	27 95       	ror	r18
     410:	35 95       	asr	r19
     412:	27 95       	ror	r18
     414:	35 95       	asr	r19
     416:	27 95       	ror	r18
     418:	96 2f       	mov	r25, r22
     41a:	99 7f       	andi	r25, 0xF9	; 249
     41c:	49 2b       	or	r20, r25
     41e:	24 2b       	or	r18, r20
     420:	28 b9       	out	0x08, r18	; 8
     422:	9b b1       	in	r25, 0x0b	; 11
     424:	92 60       	ori	r25, 0x02	; 2
     426:	9b b9       	out	0x0b, r25	; 11
     428:	9b b1       	in	r25, 0x0b	; 11
     42a:	91 60       	ori	r25, 0x01	; 1
     42c:	9b b9       	out	0x0b, r25	; 11
     42e:	25 ed       	ldi	r18, 0xD5	; 213
     430:	2a 95       	dec	r18
     432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     434:	00 00       	nop
     436:	9b b1       	in	r25, 0x0b	; 11
     438:	9e 7f       	andi	r25, 0xFE	; 254
     43a:	9b b9       	out	0x0b, r25	; 11
     43c:	9b b1       	in	r25, 0x0b	; 11
     43e:	9d 7f       	andi	r25, 0xFD	; 253
     440:	9b b9       	out	0x0b, r25	; 11
     442:	95 ed       	ldi	r25, 0xD5	; 213
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     448:	00 00       	nop
     44a:	65 b1       	in	r22, 0x05	; 5
     44c:	20 e1       	ldi	r18, 0x10	; 16
     44e:	82 9f       	mul	r24, r18
     450:	c0 01       	movw	r24, r0
     452:	11 24       	eor	r1, r1
     454:	ac 01       	movw	r20, r24
     456:	40 74       	andi	r20, 0x40	; 64
     458:	55 27       	eor	r21, r21
     45a:	55 95       	asr	r21
     45c:	47 95       	ror	r20
     45e:	55 95       	asr	r21
     460:	47 95       	ror	r20
     462:	55 95       	asr	r21
     464:	47 95       	ror	r20
     466:	55 95       	asr	r21
     468:	47 95       	ror	r20
     46a:	9c 01       	movw	r18, r24
     46c:	20 78       	andi	r18, 0x80	; 128
     46e:	33 27       	eor	r19, r19
     470:	02 2e       	mov	r0, r18
     472:	23 2f       	mov	r18, r19
     474:	00 0c       	add	r0, r0
     476:	22 1f       	adc	r18, r18
     478:	33 0b       	sbc	r19, r19
     47a:	00 0c       	add	r0, r0
     47c:	22 1f       	adc	r18, r18
     47e:	33 1f       	adc	r19, r19
     480:	36 2f       	mov	r19, r22
     482:	39 7f       	andi	r19, 0xF9	; 249
     484:	43 2b       	or	r20, r19
     486:	24 2b       	or	r18, r20
     488:	25 b9       	out	0x05, r18	; 5
     48a:	48 b1       	in	r20, 0x08	; 8
     48c:	9c 01       	movw	r18, r24
     48e:	20 71       	andi	r18, 0x10	; 16
     490:	33 27       	eor	r19, r19
     492:	35 95       	asr	r19
     494:	27 95       	ror	r18
     496:	35 95       	asr	r19
     498:	27 95       	ror	r18
     49a:	35 95       	asr	r19
     49c:	27 95       	ror	r18
     49e:	80 72       	andi	r24, 0x20	; 32
     4a0:	99 27       	eor	r25, r25
     4a2:	95 95       	asr	r25
     4a4:	87 95       	ror	r24
     4a6:	95 95       	asr	r25
     4a8:	87 95       	ror	r24
     4aa:	95 95       	asr	r25
     4ac:	87 95       	ror	r24
     4ae:	94 2f       	mov	r25, r20
     4b0:	99 7f       	andi	r25, 0xF9	; 249
     4b2:	29 2b       	or	r18, r25
     4b4:	82 2b       	or	r24, r18
     4b6:	88 b9       	out	0x08, r24	; 8
     4b8:	8b b1       	in	r24, 0x0b	; 11
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	8b b9       	out	0x0b, r24	; 11
     4be:	8b b1       	in	r24, 0x0b	; 11
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	8b b9       	out	0x0b, r24	; 11
     4c4:	85 ed       	ldi	r24, 0xD5	; 213
     4c6:	8a 95       	dec	r24
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4ca:	00 00       	nop
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	8e 7f       	andi	r24, 0xFE	; 254
     4d0:	8b b9       	out	0x0b, r24	; 11
     4d2:	8b b1       	in	r24, 0x0b	; 11
     4d4:	8d 7f       	andi	r24, 0xFD	; 253
     4d6:	8b b9       	out	0x0b, r24	; 11
     4d8:	95 ed       	ldi	r25, 0xD5	; 213
     4da:	9a 95       	dec	r25
     4dc:	f1 f7       	brne	.-4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4de:	00 00       	nop
     4e0:	08 95       	ret

000004e2 <LCDsendCommand>:
     4e2:	65 b1       	in	r22, 0x05	; 5
     4e4:	98 2f       	mov	r25, r24
     4e6:	90 74       	andi	r25, 0x40	; 64
     4e8:	49 2f       	mov	r20, r25
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	55 95       	asr	r21
     4ee:	47 95       	ror	r20
     4f0:	55 95       	asr	r21
     4f2:	47 95       	ror	r20
     4f4:	55 95       	asr	r21
     4f6:	47 95       	ror	r20
     4f8:	55 95       	asr	r21
     4fa:	47 95       	ror	r20
     4fc:	98 2f       	mov	r25, r24
     4fe:	90 78       	andi	r25, 0x80	; 128
     500:	29 2f       	mov	r18, r25
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	02 2e       	mov	r0, r18
     506:	23 2f       	mov	r18, r19
     508:	00 0c       	add	r0, r0
     50a:	22 1f       	adc	r18, r18
     50c:	33 0b       	sbc	r19, r19
     50e:	00 0c       	add	r0, r0
     510:	22 1f       	adc	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	96 2f       	mov	r25, r22
     516:	99 7f       	andi	r25, 0xF9	; 249
     518:	49 2b       	or	r20, r25
     51a:	24 2b       	or	r18, r20
     51c:	25 b9       	out	0x05, r18	; 5
     51e:	68 b1       	in	r22, 0x08	; 8
     520:	98 2f       	mov	r25, r24
     522:	90 71       	andi	r25, 0x10	; 16
     524:	49 2f       	mov	r20, r25
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	55 95       	asr	r21
     52a:	47 95       	ror	r20
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	55 95       	asr	r21
     532:	47 95       	ror	r20
     534:	98 2f       	mov	r25, r24
     536:	90 72       	andi	r25, 0x20	; 32
     538:	29 2f       	mov	r18, r25
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	35 95       	asr	r19
     53e:	27 95       	ror	r18
     540:	35 95       	asr	r19
     542:	27 95       	ror	r18
     544:	35 95       	asr	r19
     546:	27 95       	ror	r18
     548:	96 2f       	mov	r25, r22
     54a:	99 7f       	andi	r25, 0xF9	; 249
     54c:	49 2b       	or	r20, r25
     54e:	24 2b       	or	r18, r20
     550:	28 b9       	out	0x08, r18	; 8
     552:	9b b1       	in	r25, 0x0b	; 11
     554:	91 60       	ori	r25, 0x01	; 1
     556:	9b b9       	out	0x0b, r25	; 11
     558:	ef e9       	ldi	r30, 0x9F	; 159
     55a:	ff e0       	ldi	r31, 0x0F	; 15
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <LCDsendCommand+0x7a>
     560:	00 c0       	rjmp	.+0      	; 0x562 <LCDsendCommand+0x80>
     562:	00 00       	nop
     564:	9b b1       	in	r25, 0x0b	; 11
     566:	9e 7f       	andi	r25, 0xFE	; 254
     568:	9b b9       	out	0x0b, r25	; 11
     56a:	ef e9       	ldi	r30, 0x9F	; 159
     56c:	ff e0       	ldi	r31, 0x0F	; 15
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <LCDsendCommand+0x8c>
     572:	00 c0       	rjmp	.+0      	; 0x574 <LCDsendCommand+0x92>
     574:	00 00       	nop
     576:	65 b1       	in	r22, 0x05	; 5
     578:	f0 e1       	ldi	r31, 0x10	; 16
     57a:	8f 9f       	mul	r24, r31
     57c:	c0 01       	movw	r24, r0
     57e:	11 24       	eor	r1, r1
     580:	ac 01       	movw	r20, r24
     582:	40 74       	andi	r20, 0x40	; 64
     584:	55 27       	eor	r21, r21
     586:	55 95       	asr	r21
     588:	47 95       	ror	r20
     58a:	55 95       	asr	r21
     58c:	47 95       	ror	r20
     58e:	55 95       	asr	r21
     590:	47 95       	ror	r20
     592:	55 95       	asr	r21
     594:	47 95       	ror	r20
     596:	9c 01       	movw	r18, r24
     598:	20 78       	andi	r18, 0x80	; 128
     59a:	33 27       	eor	r19, r19
     59c:	02 2e       	mov	r0, r18
     59e:	23 2f       	mov	r18, r19
     5a0:	00 0c       	add	r0, r0
     5a2:	22 1f       	adc	r18, r18
     5a4:	33 0b       	sbc	r19, r19
     5a6:	00 0c       	add	r0, r0
     5a8:	22 1f       	adc	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	36 2f       	mov	r19, r22
     5ae:	39 7f       	andi	r19, 0xF9	; 249
     5b0:	43 2b       	or	r20, r19
     5b2:	24 2b       	or	r18, r20
     5b4:	25 b9       	out	0x05, r18	; 5
     5b6:	48 b1       	in	r20, 0x08	; 8
     5b8:	9c 01       	movw	r18, r24
     5ba:	20 71       	andi	r18, 0x10	; 16
     5bc:	33 27       	eor	r19, r19
     5be:	35 95       	asr	r19
     5c0:	27 95       	ror	r18
     5c2:	35 95       	asr	r19
     5c4:	27 95       	ror	r18
     5c6:	35 95       	asr	r19
     5c8:	27 95       	ror	r18
     5ca:	80 72       	andi	r24, 0x20	; 32
     5cc:	99 27       	eor	r25, r25
     5ce:	95 95       	asr	r25
     5d0:	87 95       	ror	r24
     5d2:	95 95       	asr	r25
     5d4:	87 95       	ror	r24
     5d6:	95 95       	asr	r25
     5d8:	87 95       	ror	r24
     5da:	94 2f       	mov	r25, r20
     5dc:	99 7f       	andi	r25, 0xF9	; 249
     5de:	29 2b       	or	r18, r25
     5e0:	82 2b       	or	r24, r18
     5e2:	88 b9       	out	0x08, r24	; 8
     5e4:	8b b1       	in	r24, 0x0b	; 11
     5e6:	81 60       	ori	r24, 0x01	; 1
     5e8:	8b b9       	out	0x0b, r24	; 11
     5ea:	8f e9       	ldi	r24, 0x9F	; 159
     5ec:	9f e0       	ldi	r25, 0x0F	; 15
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCDsendCommand+0x10c>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCDsendCommand+0x112>
     5f4:	00 00       	nop
     5f6:	8b b1       	in	r24, 0x0b	; 11
     5f8:	8e 7f       	andi	r24, 0xFE	; 254
     5fa:	8b b9       	out	0x0b, r24	; 11
     5fc:	ef e9       	ldi	r30, 0x9F	; 159
     5fe:	ff e0       	ldi	r31, 0x0F	; 15
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <LCDsendCommand+0x11e>
     604:	00 c0       	rjmp	.+0      	; 0x606 <LCDsendCommand+0x124>
     606:	00 00       	nop
     608:	08 95       	ret

0000060a <LCDGotoXY>:
     60a:	62 30       	cpi	r22, 0x02	; 2
     60c:	31 f0       	breq	.+12     	; 0x61a <LCDGotoXY+0x10>
     60e:	63 30       	cpi	r22, 0x03	; 3
     610:	31 f0       	breq	.+12     	; 0x61e <LCDGotoXY+0x14>
     612:	61 30       	cpi	r22, 0x01	; 1
     614:	29 f4       	brne	.+10     	; 0x620 <LCDGotoXY+0x16>
     616:	80 5c       	subi	r24, 0xC0	; 192
     618:	03 c0       	rjmp	.+6      	; 0x620 <LCDGotoXY+0x16>
     61a:	8c 5e       	subi	r24, 0xEC	; 236
     61c:	01 c0       	rjmp	.+2      	; 0x620 <LCDGotoXY+0x16>
     61e:	8c 5a       	subi	r24, 0xAC	; 172
     620:	80 68       	ori	r24, 0x80	; 128
     622:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
     626:	08 95       	ret

00000628 <LCDdefinechar>:
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	7c 01       	movw	r14, r24
     636:	86 2f       	mov	r24, r22
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	80 64       	ori	r24, 0x40	; 64
     648:	c0 e0       	ldi	r28, 0x00	; 0
     64a:	d0 e0       	ldi	r29, 0x00	; 0
     64c:	0d c0       	rjmp	.+26     	; 0x668 <LCDdefinechar+0x40>
     64e:	f7 01       	movw	r30, r14
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	14 91       	lpm	r17, Z
     656:	01 e0       	ldi	r16, 0x01	; 1
     658:	08 0f       	add	r16, r24
     65a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
     65e:	81 2f       	mov	r24, r17
     660:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
     664:	21 96       	adiw	r28, 0x01	; 1
     666:	80 2f       	mov	r24, r16
     668:	c8 30       	cpi	r28, 0x08	; 8
     66a:	d1 05       	cpc	r29, r1
     66c:	80 f3       	brcs	.-32     	; 0x64e <LCDdefinechar+0x26>
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	08 95       	ret

0000067c <LCDinit>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	8f e5       	ldi	r24, 0x5F	; 95
     682:	9a ee       	ldi	r25, 0xEA	; 234
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <LCDinit+0x8>
     688:	00 c0       	rjmp	.+0      	; 0x68a <LCDinit+0xe>
     68a:	00 00       	nop
     68c:	85 b1       	in	r24, 0x05	; 5
     68e:	89 7f       	andi	r24, 0xF9	; 249
     690:	85 b9       	out	0x05, r24	; 5
     692:	88 b1       	in	r24, 0x08	; 8
     694:	89 7f       	andi	r24, 0xF9	; 249
     696:	88 b9       	out	0x08, r24	; 8
     698:	1b b8       	out	0x0b, r1	; 11
     69a:	87 b1       	in	r24, 0x07	; 7
     69c:	86 60       	ori	r24, 0x06	; 6
     69e:	87 b9       	out	0x07, r24	; 7
     6a0:	84 b1       	in	r24, 0x04	; 4
     6a2:	86 60       	ori	r24, 0x06	; 6
     6a4:	84 b9       	out	0x04, r24	; 4
     6a6:	84 b1       	in	r24, 0x04	; 4
     6a8:	86 60       	ori	r24, 0x06	; 6
     6aa:	84 b9       	out	0x04, r24	; 4
     6ac:	87 b1       	in	r24, 0x07	; 7
     6ae:	86 60       	ori	r24, 0x06	; 6
     6b0:	87 b9       	out	0x07, r24	; 7
     6b2:	8a b1       	in	r24, 0x0a	; 10
     6b4:	83 60       	ori	r24, 0x03	; 3
     6b6:	8a b9       	out	0x0a, r24	; 10
     6b8:	85 b1       	in	r24, 0x05	; 5
     6ba:	89 7f       	andi	r24, 0xF9	; 249
     6bc:	85 b9       	out	0x05, r24	; 5
     6be:	88 b1       	in	r24, 0x08	; 8
     6c0:	86 60       	ori	r24, 0x06	; 6
     6c2:	88 b9       	out	0x08, r24	; 8
     6c4:	8b b1       	in	r24, 0x0b	; 11
     6c6:	81 60       	ori	r24, 0x01	; 1
     6c8:	8b b9       	out	0x0b, r24	; 11
     6ca:	8f e9       	ldi	r24, 0x9F	; 159
     6cc:	9f e0       	ldi	r25, 0x0F	; 15
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <LCDinit+0x52>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <LCDinit+0x58>
     6d4:	00 00       	nop
     6d6:	8b b1       	in	r24, 0x0b	; 11
     6d8:	8e 7f       	andi	r24, 0xFE	; 254
     6da:	8b b9       	out	0x0b, r24	; 11
     6dc:	8f e9       	ldi	r24, 0x9F	; 159
     6de:	9f e0       	ldi	r25, 0x0F	; 15
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCDinit+0x64>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCDinit+0x6a>
     6e6:	00 00       	nop
     6e8:	85 b1       	in	r24, 0x05	; 5
     6ea:	89 7f       	andi	r24, 0xF9	; 249
     6ec:	85 b9       	out	0x05, r24	; 5
     6ee:	88 b1       	in	r24, 0x08	; 8
     6f0:	86 60       	ori	r24, 0x06	; 6
     6f2:	88 b9       	out	0x08, r24	; 8
     6f4:	8b b1       	in	r24, 0x0b	; 11
     6f6:	81 60       	ori	r24, 0x01	; 1
     6f8:	8b b9       	out	0x0b, r24	; 11
     6fa:	8f e9       	ldi	r24, 0x9F	; 159
     6fc:	9f e0       	ldi	r25, 0x0F	; 15
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <LCDinit+0x82>
     702:	00 c0       	rjmp	.+0      	; 0x704 <LCDinit+0x88>
     704:	00 00       	nop
     706:	8b b1       	in	r24, 0x0b	; 11
     708:	8e 7f       	andi	r24, 0xFE	; 254
     70a:	8b b9       	out	0x0b, r24	; 11
     70c:	8f e9       	ldi	r24, 0x9F	; 159
     70e:	9f e0       	ldi	r25, 0x0F	; 15
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <LCDinit+0x94>
     714:	00 c0       	rjmp	.+0      	; 0x716 <LCDinit+0x9a>
     716:	00 00       	nop
     718:	85 b1       	in	r24, 0x05	; 5
     71a:	89 7f       	andi	r24, 0xF9	; 249
     71c:	85 b9       	out	0x05, r24	; 5
     71e:	88 b1       	in	r24, 0x08	; 8
     720:	89 7f       	andi	r24, 0xF9	; 249
     722:	84 60       	ori	r24, 0x04	; 4
     724:	88 b9       	out	0x08, r24	; 8
     726:	8b b1       	in	r24, 0x0b	; 11
     728:	81 60       	ori	r24, 0x01	; 1
     72a:	8b b9       	out	0x0b, r24	; 11
     72c:	8f e9       	ldi	r24, 0x9F	; 159
     72e:	9f e0       	ldi	r25, 0x0F	; 15
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <LCDinit+0xb4>
     734:	00 c0       	rjmp	.+0      	; 0x736 <LCDinit+0xba>
     736:	00 00       	nop
     738:	8b b1       	in	r24, 0x0b	; 11
     73a:	8e 7f       	andi	r24, 0xFE	; 254
     73c:	8b b9       	out	0x0b, r24	; 11
     73e:	8f e9       	ldi	r24, 0x9F	; 159
     740:	9f e0       	ldi	r25, 0x0F	; 15
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <LCDinit+0xc6>
     746:	00 c0       	rjmp	.+0      	; 0x748 <LCDinit+0xcc>
     748:	00 00       	nop
     74a:	88 e2       	ldi	r24, 0x28	; 40
     74c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
     750:	8c e0       	ldi	r24, 0x0C	; 12
     752:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCDsendCommand>
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	c0 e0       	ldi	r28, 0x00	; 0
     75a:	0a c0       	rjmp	.+20     	; 0x770 <LCDinit+0xf4>
     75c:	d1 e0       	ldi	r29, 0x01	; 1
     75e:	d6 0f       	add	r29, r22
     760:	8c 2f       	mov	r24, r28
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	88 59       	subi	r24, 0x98	; 152
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	0e 94 14 03 	call	0x628	; 0x628 <LCDdefinechar>
     76c:	c8 5f       	subi	r28, 0xF8	; 248
     76e:	6d 2f       	mov	r22, r29
     770:	c0 34       	cpi	r28, 0x40	; 64
     772:	a0 f3       	brcs	.-24     	; 0x75c <LCDinit+0xe0>
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <LCDescribeDato>:
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <LCDescribeDato+0xe>
     788:	00 d0       	rcall	.+0      	; 0x78a <LCDescribeDato+0x10>
     78a:	1f 92       	push	r1
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	7b 01       	movw	r14, r22
     792:	fe 01       	movw	r30, r28
     794:	31 96       	adiw	r30, 0x01	; 1
     796:	25 e0       	ldi	r18, 0x05	; 5
     798:	df 01       	movw	r26, r30
     79a:	1d 92       	st	X+, r1
     79c:	2a 95       	dec	r18
     79e:	e9 f7       	brne	.-6      	; 0x79a <LCDescribeDato+0x20>
     7a0:	24 e0       	ldi	r18, 0x04	; 4
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <LCDescribeDato+0x4a>
     7a6:	6a e0       	ldi	r22, 0x0A	; 10
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
     7ae:	e1 e0       	ldi	r30, 0x01	; 1
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ec 0f       	add	r30, r28
     7b4:	fd 1f       	adc	r31, r29
     7b6:	e2 0f       	add	r30, r18
     7b8:	f3 1f       	adc	r31, r19
     7ba:	80 83       	st	Z, r24
     7bc:	86 2f       	mov	r24, r22
     7be:	97 2f       	mov	r25, r23
     7c0:	21 50       	subi	r18, 0x01	; 1
     7c2:	31 09       	sbc	r19, r1
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	79 f7       	brne	.-34     	; 0x7a6 <LCDescribeDato+0x2c>
     7c8:	bf ef       	ldi	r27, 0xFF	; 255
     7ca:	eb 16       	cp	r14, r27
     7cc:	fb 06       	cpc	r15, r27
     7ce:	81 f4       	brne	.+32     	; 0x7f0 <LCDescribeDato+0x76>
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <LCDescribeDato+0x5e>
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <LCDescribeDato+0x62>
     7d8:	00 e0       	ldi	r16, 0x00	; 0
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	e1 e0       	ldi	r30, 0x01	; 1
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ec 0f       	add	r30, r28
     7e2:	fd 1f       	adc	r31, r29
     7e4:	e0 0f       	add	r30, r16
     7e6:	f1 1f       	adc	r31, r17
     7e8:	20 81       	ld	r18, Z
     7ea:	22 23       	and	r18, r18
     7ec:	91 f3       	breq	.-28     	; 0x7d2 <LCDescribeDato+0x58>
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <LCDescribeDato+0x7e>
     7f0:	05 e0       	ldi	r16, 0x05	; 5
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	0e 19       	sub	r16, r14
     7f6:	1f 09       	sbc	r17, r15
     7f8:	99 23       	and	r25, r25
     7fa:	84 f4       	brge	.+32     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7fc:	8d e2       	ldi	r24, 0x2D	; 45
     7fe:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
     802:	0c c0       	rjmp	.+24     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     804:	e1 e0       	ldi	r30, 0x01	; 1
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	ec 0f       	add	r30, r28
     80a:	fd 1f       	adc	r31, r29
     80c:	e0 0f       	add	r30, r16
     80e:	f1 1f       	adc	r31, r17
     810:	80 81       	ld	r24, Z
     812:	80 5d       	subi	r24, 0xD0	; 208
     814:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
     818:	0f 5f       	subi	r16, 0xFF	; 255
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
     81c:	05 30       	cpi	r16, 0x05	; 5
     81e:	11 05       	cpc	r17, r1
     820:	8c f3       	brlt	.-30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	08 95       	ret

0000083a <main>:

uint8_t key;

int main(void)
{
	init();
     83a:	0e 94 73 00 	call	0xe6	; 0xe6 <init>
	LCDinit();
     83e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCDinit>
	MEF_Inicializar();
     842:	0e 94 62 08 	call	0x10c4	; 0x10c4 <MEF_Inicializar>
	sEOS_time1(t);
     846:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <t>
     84a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <t+0x1>
     84e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <t+0x2>
     852:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <t+0x3>
     856:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <t+0x4>
     85a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <t+0x5>
     85e:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
	while(1)
	{
		sEOS_Despachador();
     862:	0e 94 ab 08 	call	0x1156	; 0x1156 <sEOS_Despachador>
     866:	fd cf       	rjmp	.-6      	; 0x862 <main+0x28>

00000868 <LCD_Actualizar>:
	}
}


void LCD_Actualizar(time t){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <LCD_Actualizar+0x6>
     86e:	00 d0       	rcall	.+0      	; 0x870 <LCD_Actualizar+0x8>
     870:	00 d0       	rcall	.+0      	; 0x872 <LCD_Actualizar+0xa>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	49 83       	std	Y+1, r20	; 0x01
     878:	5a 83       	std	Y+2, r21	; 0x02
     87a:	6b 83       	std	Y+3, r22	; 0x03
     87c:	7c 83       	std	Y+4, r23	; 0x04
     87e:	8d 83       	std	Y+5, r24	; 0x05
     880:	9e 83       	std	Y+6, r25	; 0x06

	LCDGotoXY(4,1);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
	LCDescribeDato(t.date,2);
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	62 e0       	ldi	r22, 0x02	; 2
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 bd 03 	call	0x77a	; 0x77a <LCDescribeDato>
	LCDsendChar('/');
     896:	8f e2       	ldi	r24, 0x2F	; 47
     898:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
	LCDescribeDato(t.month,2);
     89c:	8d 81       	ldd	r24, Y+5	; 0x05
     89e:	62 e0       	ldi	r22, 0x02	; 2
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 bd 03 	call	0x77a	; 0x77a <LCDescribeDato>
	LCDsendChar('/');
     8a8:	8f e2       	ldi	r24, 0x2F	; 47
     8aa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
	LCDescribeDato(t.year,2);
     8ae:	8e 81       	ldd	r24, Y+6	; 0x06
     8b0:	62 e0       	ldi	r22, 0x02	; 2
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 bd 03 	call	0x77a	; 0x77a <LCDescribeDato>
	LCDGotoXY(4,0);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
	LCDescribeDato(t.hour,2);
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 bd 03 	call	0x77a	; 0x77a <LCDescribeDato>
	LCDsendChar(':');
     8ce:	8a e3       	ldi	r24, 0x3A	; 58
     8d0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
	LCDescribeDato(t.minute,2);
     8d4:	8a 81       	ldd	r24, Y+2	; 0x02
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 bd 03 	call	0x77a	; 0x77a <LCDescribeDato>
	LCDsendChar(':');
     8e0:	8a e3       	ldi	r24, 0x3A	; 58
     8e2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
	LCDescribeDato(t.second,2);	
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	62 e0       	ldi	r22, 0x02	; 2
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 bd 03 	call	0x77a	; 0x77a <LCDescribeDato>
}
     8f2:	26 96       	adiw	r28, 0x06	; 6
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <fINIT>:
	(*MEF_funciones[estado])();
}

void fINIT(void)
{
	if(flag==1){
     904:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	f9 f4       	brne	.+62     	; 0x94a <fINIT+0x46>
		uint8_t tecla = RetornarTecla();
     90c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		if(tecla == 'A'){ 
     910:	81 34       	cpi	r24, 0x41	; 65
     912:	d9 f4       	brne	.+54     	; 0x94a <fINIT+0x46>
			ti=obtenerTime();
     914:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
     918:	f4 2f       	mov	r31, r20
     91a:	e5 2f       	mov	r30, r21
     91c:	86 2f       	mov	r24, r22
     91e:	97 2f       	mov	r25, r23
     920:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
     924:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
     928:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
     92c:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
     930:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
     934:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
			sEOS_time2(ti);
     938:	42 2f       	mov	r20, r18
     93a:	53 2f       	mov	r21, r19
     93c:	6f 2f       	mov	r22, r31
     93e:	7e 2f       	mov	r23, r30
     940:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			estado = EAN;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <estado>
     94a:	08 95       	ret

0000094c <fEAN>:
		}
	}
}

void fEAN(void){
	if(flag==1){
     94c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	09 f0       	breq	.+2      	; 0x956 <fEAN+0xa>
     954:	6f c0       	rjmp	.+222    	; 0xa34 <fEAN+0xe8>
		blanco[0]=' ';
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <blanco>
		sEOS_timeBlank(ti,blanco);
     95c:	20 e3       	ldi	r18, 0x30	; 48
     95e:	31 e0       	ldi	r19, 0x01	; 1
     960:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     964:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     968:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     96c:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     970:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     974:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     978:	0e 94 64 09 	call	0x12c8	; 0x12c8 <sEOS_timeBlank>
		uint8_t tecla = RetornarTecla();
     97c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		switch(tecla){
     980:	82 34       	cpi	r24, 0x42	; 66
     982:	69 f0       	breq	.+26     	; 0x99e <fEAN+0x52>
     984:	18 f4       	brcc	.+6      	; 0x98c <fEAN+0x40>
     986:	81 34       	cpi	r24, 0x41	; 65
     988:	31 f0       	breq	.+12     	; 0x996 <fEAN+0x4a>
     98a:	08 95       	ret
     98c:	83 34       	cpi	r24, 0x43	; 67
     98e:	f9 f0       	breq	.+62     	; 0x9ce <fEAN+0x82>
     990:	84 34       	cpi	r24, 0x44	; 68
     992:	b1 f1       	breq	.+108    	; 0xa00 <fEAN+0xb4>
     994:	08 95       	ret
			case 'A':
				estado = EME;
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <estado>
				break;
     99c:	08 95       	ret
			case 'B':
				ti.year++;
     99e:	e6 e3       	ldi	r30, 0x36	; 54
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	85 81       	ldd	r24, Z+5	; 0x05
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	85 83       	std	Z+5, r24	; 0x05
				if(ti.year==100){
     9a8:	84 36       	cpi	r24, 0x64	; 100
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <fEAN+0x64>
					ti.year=0;
     9ac:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <ti+0x5>
				}
				sEOS_time2(ti);
     9b0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     9b4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     9b8:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     9bc:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     9c0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     9c4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     9c8:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
				break;
     9cc:	08 95       	ret
			case 'C':
				ti.year--;
     9ce:	e6 e3       	ldi	r30, 0x36	; 54
     9d0:	f1 e0       	ldi	r31, 0x01	; 1
     9d2:	85 81       	ldd	r24, Z+5	; 0x05
     9d4:	81 50       	subi	r24, 0x01	; 1
     9d6:	85 83       	std	Z+5, r24	; 0x05
				if(ti.year==255){
     9d8:	8f 3f       	cpi	r24, 0xFF	; 255
     9da:	19 f4       	brne	.+6      	; 0x9e2 <fEAN+0x96>
					ti.year=99;
     9dc:	83 e6       	ldi	r24, 0x63	; 99
     9de:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ti+0x5>
				}
				sEOS_time2(ti);
     9e2:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     9e6:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     9ea:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     9ee:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     9f2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     9f6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     9fa:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
				break;
     9fe:	08 95       	ret
			case 'D':
				ti=obtenerTime();
     a00:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
     a04:	f4 2f       	mov	r31, r20
     a06:	e5 2f       	mov	r30, r21
     a08:	86 2f       	mov	r24, r22
     a0a:	97 2f       	mov	r25, r23
     a0c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
     a10:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
     a14:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
     a18:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
     a1c:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
     a20:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
				sEOS_time1(ti);
     a24:	42 2f       	mov	r20, r18
     a26:	53 2f       	mov	r21, r19
     a28:	6f 2f       	mov	r22, r31
     a2a:	7e 2f       	mov	r23, r30
     a2c:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
				estado = INIT;
     a30:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
     a34:	08 95       	ret

00000a36 <fEME>:
		}
	}
}

void fEME(void){
	if(flag==1){
     a36:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <fEME+0xa>
     a3e:	b2 c0       	rjmp	.+356    	; 0xba4 <fEME+0x16e>
		blanco[1]=' ';
     a40:	80 e2       	ldi	r24, 0x20	; 32
     a42:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <blanco+0x1>
		sEOS_timeBlank(ti,blanco);
     a46:	20 e3       	ldi	r18, 0x30	; 48
     a48:	31 e0       	ldi	r19, 0x01	; 1
     a4a:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     a4e:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     a52:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     a56:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     a5a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     a5e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     a62:	0e 94 64 09 	call	0x12c8	; 0x12c8 <sEOS_timeBlank>
		uint8_t tecla = RetornarTecla();
     a66:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		switch(tecla){
     a6a:	82 34       	cpi	r24, 0x42	; 66
     a6c:	79 f0       	breq	.+30     	; 0xa8c <fEME+0x56>
     a6e:	18 f4       	brcc	.+6      	; 0xa76 <fEME+0x40>
     a70:	81 34       	cpi	r24, 0x41	; 65
     a72:	41 f0       	breq	.+16     	; 0xa84 <fEME+0x4e>
     a74:	08 95       	ret
     a76:	83 34       	cpi	r24, 0x43	; 67
     a78:	09 f4       	brne	.+2      	; 0xa7c <fEME+0x46>
     a7a:	41 c0       	rjmp	.+130    	; 0xafe <fEME+0xc8>
     a7c:	84 34       	cpi	r24, 0x44	; 68
     a7e:	09 f4       	brne	.+2      	; 0xa82 <fEME+0x4c>
     a80:	77 c0       	rjmp	.+238    	; 0xb70 <fEME+0x13a>
     a82:	08 95       	ret
			case 'A':
			estado = EDI;
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <estado>
			break;
     a8a:	08 95       	ret
			case 'B':
			ti.month++;
     a8c:	e6 e3       	ldi	r30, 0x36	; 54
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	84 81       	ldd	r24, Z+4	; 0x04
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	84 83       	std	Z+4, r24	; 0x04
			if(ti.month==13){
     a96:	8d 30       	cpi	r24, 0x0D	; 13
     a98:	19 f4       	brne	.+6      	; 0xaa0 <fEME+0x6a>
				ti.month=1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ti+0x4>
			}
			if((ti.month==2)&(ti.date>29)){
     aa0:	e6 e3       	ldi	r30, 0x36	; 54
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	84 81       	ldd	r24, Z+4	; 0x04
     aa6:	33 81       	ldd	r19, Z+3	; 0x03
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	09 f0       	breq	.+2      	; 0xab0 <fEME+0x7a>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	3e 31       	cpi	r19, 0x1E	; 30
     ab4:	08 f4       	brcc	.+2      	; 0xab8 <fEME+0x82>
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	92 23       	and	r25, r18
     aba:	19 f0       	breq	.+6      	; 0xac2 <fEME+0x8c>
				ti.date=1;
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <ti+0x3>
			}
			if( ((ti.month==4) || (ti.month==6) || (ti.month==9) || (ti.month==11))){
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	31 f0       	breq	.+12     	; 0xad2 <fEME+0x9c>
     ac6:	86 30       	cpi	r24, 0x06	; 6
     ac8:	21 f0       	breq	.+8      	; 0xad2 <fEME+0x9c>
     aca:	89 30       	cpi	r24, 0x09	; 9
     acc:	11 f0       	breq	.+4      	; 0xad2 <fEME+0x9c>
     ace:	8b 30       	cpi	r24, 0x0B	; 11
     ad0:	39 f4       	brne	.+14     	; 0xae0 <fEME+0xaa>
				if(ti.date>30){
     ad2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ti+0x3>
     ad6:	8f 31       	cpi	r24, 0x1F	; 31
     ad8:	18 f0       	brcs	.+6      	; 0xae0 <fEME+0xaa>
					ti.date=1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
				}
			}
			sEOS_time2(ti);
     ae0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     ae4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     ae8:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     aec:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     af0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     af4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     af8:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     afc:	08 95       	ret
			case 'C':
			ti.month--;
     afe:	e6 e3       	ldi	r30, 0x36	; 54
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	84 81       	ldd	r24, Z+4	; 0x04
     b04:	81 50       	subi	r24, 0x01	; 1
     b06:	84 83       	std	Z+4, r24	; 0x04
			if(ti.month==0){
     b08:	81 11       	cpse	r24, r1
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <fEME+0xdc>
				ti.month=12;
     b0c:	8c e0       	ldi	r24, 0x0C	; 12
     b0e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ti+0x4>
			}
			if((ti.month==2)&(ti.date>29)){
     b12:	e6 e3       	ldi	r30, 0x36	; 54
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	84 81       	ldd	r24, Z+4	; 0x04
     b18:	33 81       	ldd	r19, Z+3	; 0x03
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	09 f0       	breq	.+2      	; 0xb22 <fEME+0xec>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	3e 31       	cpi	r19, 0x1E	; 30
     b26:	08 f4       	brcc	.+2      	; 0xb2a <fEME+0xf4>
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	92 23       	and	r25, r18
     b2c:	19 f0       	breq	.+6      	; 0xb34 <fEME+0xfe>
				ti.date=1;
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <ti+0x3>
			}
			if( ((ti.month==4) || (ti.month==6) || (ti.month==9) || (ti.month==11))){
     b34:	84 30       	cpi	r24, 0x04	; 4
     b36:	31 f0       	breq	.+12     	; 0xb44 <fEME+0x10e>
     b38:	86 30       	cpi	r24, 0x06	; 6
     b3a:	21 f0       	breq	.+8      	; 0xb44 <fEME+0x10e>
     b3c:	89 30       	cpi	r24, 0x09	; 9
     b3e:	11 f0       	breq	.+4      	; 0xb44 <fEME+0x10e>
     b40:	8b 30       	cpi	r24, 0x0B	; 11
     b42:	39 f4       	brne	.+14     	; 0xb52 <fEME+0x11c>
				if(ti.date>30){
     b44:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ti+0x3>
     b48:	8f 31       	cpi	r24, 0x1F	; 31
     b4a:	18 f0       	brcs	.+6      	; 0xb52 <fEME+0x11c>
					ti.date=1;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
				}
			}
			sEOS_time2(ti);
     b52:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     b56:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     b5a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     b5e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     b62:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     b66:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     b6a:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     b6e:	08 95       	ret
			case 'D':
			ti=obtenerTime();
     b70:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
     b74:	f4 2f       	mov	r31, r20
     b76:	e5 2f       	mov	r30, r21
     b78:	86 2f       	mov	r24, r22
     b7a:	97 2f       	mov	r25, r23
     b7c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
     b80:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
     b84:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
     b88:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
     b8c:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
     b90:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
			sEOS_time1(ti);
     b94:	42 2f       	mov	r20, r18
     b96:	53 2f       	mov	r21, r19
     b98:	6f 2f       	mov	r22, r31
     b9a:	7e 2f       	mov	r23, r30
     b9c:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
			estado = INIT;
     ba0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
     ba4:	08 95       	ret

00000ba6 <fEDI>:
		}
	}
}
	
void fEDI(void){
	if(flag==1){
     ba6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	09 f0       	breq	.+2      	; 0xbb0 <fEDI+0xa>
     bae:	b1 c0       	rjmp	.+354    	; 0xd12 <fEDI+0x16c>
		blanco[2]=' ';
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <blanco+0x2>
		sEOS_timeBlank(ti,blanco);
     bb6:	20 e3       	ldi	r18, 0x30	; 48
     bb8:	31 e0       	ldi	r19, 0x01	; 1
     bba:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     bbe:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     bc2:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     bc6:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     bca:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     bce:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     bd2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <sEOS_timeBlank>
		uint8_t tecla = RetornarTecla();
     bd6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		switch(tecla){
     bda:	82 34       	cpi	r24, 0x42	; 66
     bdc:	79 f0       	breq	.+30     	; 0xbfc <fEDI+0x56>
     bde:	18 f4       	brcc	.+6      	; 0xbe6 <fEDI+0x40>
     be0:	81 34       	cpi	r24, 0x41	; 65
     be2:	41 f0       	breq	.+16     	; 0xbf4 <fEDI+0x4e>
     be4:	08 95       	ret
     be6:	83 34       	cpi	r24, 0x43	; 67
     be8:	09 f4       	brne	.+2      	; 0xbec <fEDI+0x46>
     bea:	41 c0       	rjmp	.+130    	; 0xc6e <fEDI+0xc8>
     bec:	84 34       	cpi	r24, 0x44	; 68
     bee:	09 f4       	brne	.+2      	; 0xbf2 <fEDI+0x4c>
     bf0:	76 c0       	rjmp	.+236    	; 0xcde <fEDI+0x138>
     bf2:	08 95       	ret
			case 'A':
			estado = EHO;
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <estado>
			break;
     bfa:	08 95       	ret
			case 'B':
			ti.date++;
     bfc:	e6 e3       	ldi	r30, 0x36	; 54
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	83 81       	ldd	r24, Z+3	; 0x03
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	83 83       	std	Z+3, r24	; 0x03
			if((ti.month==2)&(ti.date==30)){
     c06:	24 81       	ldd	r18, Z+4	; 0x04
     c08:	31 e0       	ldi	r19, 0x01	; 1
     c0a:	22 30       	cpi	r18, 0x02	; 2
     c0c:	09 f0       	breq	.+2      	; 0xc10 <fEDI+0x6a>
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	8e 31       	cpi	r24, 0x1E	; 30
     c14:	09 f0       	breq	.+2      	; 0xc18 <fEDI+0x72>
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	93 23       	and	r25, r19
     c1a:	19 f0       	breq	.+6      	; 0xc22 <fEDI+0x7c>
				ti.date=1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
			}
			if( ((ti.month==4) || (ti.month==6) || (ti.month==9) || (ti.month==11))){
     c22:	24 30       	cpi	r18, 0x04	; 4
     c24:	31 f0       	breq	.+12     	; 0xc32 <fEDI+0x8c>
     c26:	26 30       	cpi	r18, 0x06	; 6
     c28:	21 f0       	breq	.+8      	; 0xc32 <fEDI+0x8c>
     c2a:	29 30       	cpi	r18, 0x09	; 9
     c2c:	11 f0       	breq	.+4      	; 0xc32 <fEDI+0x8c>
     c2e:	2b 30       	cpi	r18, 0x0B	; 11
     c30:	41 f4       	brne	.+16     	; 0xc42 <fEDI+0x9c>
				if(ti.date==31){
     c32:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ti+0x3>
     c36:	8f 31       	cpi	r24, 0x1F	; 31
     c38:	59 f4       	brne	.+22     	; 0xc50 <fEDI+0xaa>
					ti.date=1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <fEDI+0xaa>
				}
			}else if(ti.date==32){
     c42:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ti+0x3>
     c46:	80 32       	cpi	r24, 0x20	; 32
     c48:	19 f4       	brne	.+6      	; 0xc50 <fEDI+0xaa>
				ti.date=1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
			}
			sEOS_time2(ti);
     c50:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     c54:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     c58:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     c5c:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     c60:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     c64:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     c68:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     c6c:	08 95       	ret
			case 'C':
			ti.date--;
     c6e:	e6 e3       	ldi	r30, 0x36	; 54
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	83 81       	ldd	r24, Z+3	; 0x03
     c74:	81 50       	subi	r24, 0x01	; 1
     c76:	83 83       	std	Z+3, r24	; 0x03
			if((ti.month==2)&(ti.date==0)){
     c78:	94 81       	ldd	r25, Z+4	; 0x04
     c7a:	31 e0       	ldi	r19, 0x01	; 1
     c7c:	92 30       	cpi	r25, 0x02	; 2
     c7e:	09 f0       	breq	.+2      	; 0xc82 <fEDI+0xdc>
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	81 11       	cpse	r24, r1
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	23 23       	and	r18, r19
     c8a:	19 f0       	breq	.+6      	; 0xc92 <fEDI+0xec>
				ti.date=29;
     c8c:	8d e1       	ldi	r24, 0x1D	; 29
     c8e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
			}
				if( ((ti.month==4) || (ti.month==6) || (ti.month==9) || (ti.month==11))){
     c92:	94 30       	cpi	r25, 0x04	; 4
     c94:	31 f0       	breq	.+12     	; 0xca2 <fEDI+0xfc>
     c96:	96 30       	cpi	r25, 0x06	; 6
     c98:	21 f0       	breq	.+8      	; 0xca2 <fEDI+0xfc>
     c9a:	99 30       	cpi	r25, 0x09	; 9
     c9c:	11 f0       	breq	.+4      	; 0xca2 <fEDI+0xfc>
     c9e:	9b 30       	cpi	r25, 0x0B	; 11
     ca0:	41 f4       	brne	.+16     	; 0xcb2 <fEDI+0x10c>
					if(ti.date==0){
     ca2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ti+0x3>
     ca6:	81 11       	cpse	r24, r1
     ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <fEDI+0x11a>
						ti.date=30;
     caa:	8e e1       	ldi	r24, 0x1E	; 30
     cac:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
     cb0:	07 c0       	rjmp	.+14     	; 0xcc0 <fEDI+0x11a>
					}
					}else if(ti.date==0){
     cb2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ti+0x3>
     cb6:	81 11       	cpse	r24, r1
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <fEDI+0x11a>
					ti.date=31;
     cba:	8f e1       	ldi	r24, 0x1F	; 31
     cbc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ti+0x3>
				}
			sEOS_time2(ti);
     cc0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     cc4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     cc8:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     ccc:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     cd0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     cd4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     cd8:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     cdc:	08 95       	ret
			case 'D':
			ti=obtenerTime();
     cde:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
     ce2:	f4 2f       	mov	r31, r20
     ce4:	e5 2f       	mov	r30, r21
     ce6:	86 2f       	mov	r24, r22
     ce8:	97 2f       	mov	r25, r23
     cea:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
     cee:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
     cf2:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
     cf6:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
     cfa:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
     cfe:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
			sEOS_time1(ti);
     d02:	42 2f       	mov	r20, r18
     d04:	53 2f       	mov	r21, r19
     d06:	6f 2f       	mov	r22, r31
     d08:	7e 2f       	mov	r23, r30
     d0a:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
			estado = INIT;
     d0e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
     d12:	08 95       	ret

00000d14 <fEHO>:
		}
	}
}

void fEHO(void){
	if(flag==1){
     d14:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	09 f0       	breq	.+2      	; 0xd1e <fEHO+0xa>
     d1c:	6f c0       	rjmp	.+222    	; 0xdfc <fEHO+0xe8>
		blanco[3]=' ';
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <blanco+0x3>
		sEOS_timeBlank(ti,blanco);
     d24:	20 e3       	ldi	r18, 0x30	; 48
     d26:	31 e0       	ldi	r19, 0x01	; 1
     d28:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     d2c:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     d30:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     d34:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     d38:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     d3c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     d40:	0e 94 64 09 	call	0x12c8	; 0x12c8 <sEOS_timeBlank>
		uint8_t tecla = RetornarTecla();
     d44:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		switch(tecla){
     d48:	82 34       	cpi	r24, 0x42	; 66
     d4a:	69 f0       	breq	.+26     	; 0xd66 <fEHO+0x52>
     d4c:	18 f4       	brcc	.+6      	; 0xd54 <fEHO+0x40>
     d4e:	81 34       	cpi	r24, 0x41	; 65
     d50:	31 f0       	breq	.+12     	; 0xd5e <fEHO+0x4a>
     d52:	08 95       	ret
     d54:	83 34       	cpi	r24, 0x43	; 67
     d56:	f9 f0       	breq	.+62     	; 0xd96 <fEHO+0x82>
     d58:	84 34       	cpi	r24, 0x44	; 68
     d5a:	b1 f1       	breq	.+108    	; 0xdc8 <fEHO+0xb4>
     d5c:	08 95       	ret
			case 'A':
			estado = EMI;
     d5e:	85 e0       	ldi	r24, 0x05	; 5
     d60:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <estado>
			break;
     d64:	08 95       	ret
			case 'B':
			ti.hour++;
     d66:	e6 e3       	ldi	r30, 0x36	; 54
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	82 83       	std	Z+2, r24	; 0x02
			if(ti.hour==24){
     d70:	88 31       	cpi	r24, 0x18	; 24
     d72:	11 f4       	brne	.+4      	; 0xd78 <fEHO+0x64>
				ti.hour=0;
     d74:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ti+0x2>
			}
			sEOS_time2(ti);
     d78:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     d7c:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     d80:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     d84:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     d88:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     d8c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     d90:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     d94:	08 95       	ret
			case 'C':
			ti.hour--;
     d96:	e6 e3       	ldi	r30, 0x36	; 54
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	82 83       	std	Z+2, r24	; 0x02
			if(ti.hour==255){
     da0:	8f 3f       	cpi	r24, 0xFF	; 255
     da2:	19 f4       	brne	.+6      	; 0xdaa <fEHO+0x96>
				ti.hour=23;
     da4:	87 e1       	ldi	r24, 0x17	; 23
     da6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <ti+0x2>
			}
			sEOS_time2(ti);
     daa:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     dae:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     db2:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     db6:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     dba:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     dbe:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     dc2:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     dc6:	08 95       	ret
			case 'D':
			ti=obtenerTime();
     dc8:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
     dcc:	f4 2f       	mov	r31, r20
     dce:	e5 2f       	mov	r30, r21
     dd0:	86 2f       	mov	r24, r22
     dd2:	97 2f       	mov	r25, r23
     dd4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
     dd8:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
     ddc:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
     de0:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
     de4:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
     de8:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
			sEOS_time1(ti);
     dec:	42 2f       	mov	r20, r18
     dee:	53 2f       	mov	r21, r19
     df0:	6f 2f       	mov	r22, r31
     df2:	7e 2f       	mov	r23, r30
     df4:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
			estado = INIT;
     df8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
     dfc:	08 95       	ret

00000dfe <fEMI>:
		}
	}
}

void fEMI(void){
	if(flag==1){
     dfe:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	09 f0       	breq	.+2      	; 0xe08 <fEMI+0xa>
     e06:	6f c0       	rjmp	.+222    	; 0xee6 <fEMI+0xe8>
		blanco[4]=' ';
     e08:	80 e2       	ldi	r24, 0x20	; 32
     e0a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <blanco+0x4>
		sEOS_timeBlank(ti,blanco);
     e0e:	20 e3       	ldi	r18, 0x30	; 48
     e10:	31 e0       	ldi	r19, 0x01	; 1
     e12:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     e16:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     e1a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     e1e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     e22:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     e26:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     e2a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <sEOS_timeBlank>
		uint8_t tecla = RetornarTecla();
     e2e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		switch(tecla){
     e32:	82 34       	cpi	r24, 0x42	; 66
     e34:	69 f0       	breq	.+26     	; 0xe50 <fEMI+0x52>
     e36:	18 f4       	brcc	.+6      	; 0xe3e <fEMI+0x40>
     e38:	81 34       	cpi	r24, 0x41	; 65
     e3a:	31 f0       	breq	.+12     	; 0xe48 <fEMI+0x4a>
     e3c:	08 95       	ret
     e3e:	83 34       	cpi	r24, 0x43	; 67
     e40:	f9 f0       	breq	.+62     	; 0xe80 <fEMI+0x82>
     e42:	84 34       	cpi	r24, 0x44	; 68
     e44:	b1 f1       	breq	.+108    	; 0xeb2 <fEMI+0xb4>
     e46:	08 95       	ret
			case 'A':
			estado = ESE;
     e48:	86 e0       	ldi	r24, 0x06	; 6
     e4a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <estado>
			break;
     e4e:	08 95       	ret
			case 'B':
			ti.minute++;
     e50:	e6 e3       	ldi	r30, 0x36	; 54
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	81 81       	ldd	r24, Z+1	; 0x01
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	81 83       	std	Z+1, r24	; 0x01
			if(ti.minute==60){
     e5a:	8c 33       	cpi	r24, 0x3C	; 60
     e5c:	11 f4       	brne	.+4      	; 0xe62 <fEMI+0x64>
				ti.minute=0;
     e5e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ti+0x1>
			}
			sEOS_time2(ti);		
     e62:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     e66:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     e6a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     e6e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     e72:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     e76:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     e7a:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     e7e:	08 95       	ret
			case 'C':
			ti.minute--;
     e80:	e6 e3       	ldi	r30, 0x36	; 54
     e82:	f1 e0       	ldi	r31, 0x01	; 1
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	81 50       	subi	r24, 0x01	; 1
     e88:	81 83       	std	Z+1, r24	; 0x01
			if(ti.minute==255){
     e8a:	8f 3f       	cpi	r24, 0xFF	; 255
     e8c:	19 f4       	brne	.+6      	; 0xe94 <fEMI+0x96>
				ti.minute=59;
     e8e:	8b e3       	ldi	r24, 0x3B	; 59
     e90:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <ti+0x1>
			}
			sEOS_time2(ti);
     e94:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     e98:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     e9c:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     ea0:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     ea4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     ea8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     eac:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
     eb0:	08 95       	ret
			case 'D':
			ti=obtenerTime();
     eb2:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
     eb6:	f4 2f       	mov	r31, r20
     eb8:	e5 2f       	mov	r30, r21
     eba:	86 2f       	mov	r24, r22
     ebc:	97 2f       	mov	r25, r23
     ebe:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
     ec2:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
     ec6:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
     eca:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
     ece:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
     ed2:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
			sEOS_time1(ti);
     ed6:	42 2f       	mov	r20, r18
     ed8:	53 2f       	mov	r21, r19
     eda:	6f 2f       	mov	r22, r31
     edc:	7e 2f       	mov	r23, r30
     ede:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
			estado = INIT;
     ee2:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
     ee6:	08 95       	ret

00000ee8 <aplicarTiempo>:
	}
}



static void aplicarTiempo(time newTime){
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <aplicarTiempo+0x8>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <aplicarTiempo+0xa>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <aplicarTiempo+0xc>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	49 83       	std	Y+1, r20	; 0x01
     efa:	5a 83       	std	Y+2, r21	; 0x02
     efc:	6b 83       	std	Y+3, r22	; 0x03
     efe:	7c 83       	std	Y+4, r23	; 0x04
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	9e 83       	std	Y+6, r25	; 0x06
	if(newTime.hour<25){
     f04:	69 31       	cpi	r22, 0x19	; 25
     f06:	08 f0       	brcs	.+2      	; 0xf0a <aplicarTiempo+0x22>
     f08:	42 c0       	rjmp	.+132    	; 0xf8e <aplicarTiempo+0xa6>
		if(newTime.minute<60){
     f0a:	5c 33       	cpi	r21, 0x3C	; 60
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <aplicarTiempo+0x28>
     f0e:	3f c0       	rjmp	.+126    	; 0xf8e <aplicarTiempo+0xa6>
			if(newTime.second<60){
     f10:	4c 33       	cpi	r20, 0x3C	; 60
     f12:	e8 f5       	brcc	.+122    	; 0xf8e <aplicarTiempo+0xa6>
				if(newTime.month<13){
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	8d 30       	cpi	r24, 0x0D	; 13
     f18:	d0 f5       	brcc	.+116    	; 0xf8e <aplicarTiempo+0xa6>
					if(newTime.date<32){
     f1a:	17 2f       	mov	r17, r23
     f1c:	70 32       	cpi	r23, 0x20	; 32
     f1e:	b8 f5       	brcc	.+110    	; 0xf8e <aplicarTiempo+0xa6>
						if ((newTime.month==4) || (newTime.month==6) || (newTime.month==9) || (newTime.month==11)){
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	31 f0       	breq	.+12     	; 0xf30 <aplicarTiempo+0x48>
     f24:	86 30       	cpi	r24, 0x06	; 6
     f26:	21 f0       	breq	.+8      	; 0xf30 <aplicarTiempo+0x48>
     f28:	89 30       	cpi	r24, 0x09	; 9
     f2a:	11 f0       	breq	.+4      	; 0xf30 <aplicarTiempo+0x48>
     f2c:	8b 30       	cpi	r24, 0x0B	; 11
     f2e:	59 f4       	brne	.+22     	; 0xf46 <aplicarTiempo+0x5e>
							if(newTime.date<31) setearTime(newTime);
     f30:	1f 31       	cpi	r17, 0x1F	; 31
     f32:	68 f5       	brcc	.+90     	; 0xf8e <aplicarTiempo+0xa6>
     f34:	49 81       	ldd	r20, Y+1	; 0x01
     f36:	5a 81       	ldd	r21, Y+2	; 0x02
     f38:	6b 81       	ldd	r22, Y+3	; 0x03
     f3a:	7c 81       	ldd	r23, Y+4	; 0x04
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	0e 94 54 01 	call	0x2a8	; 0x2a8 <setearTime>
     f44:	24 c0       	rjmp	.+72     	; 0xf8e <aplicarTiempo+0xa6>
						}else if(newTime.month==2){
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	d1 f4       	brne	.+52     	; 0xf7e <aplicarTiempo+0x96>
							if(not_leap()){
     f4a:	0e 94 7f 00 	call	0xfe	; 0xfe <not_leap>
     f4e:	88 23       	and	r24, r24
     f50:	59 f0       	breq	.+22     	; 0xf68 <aplicarTiempo+0x80>
								if(newTime.date<29) setearTime(newTime);
     f52:	1d 31       	cpi	r17, 0x1D	; 29
     f54:	e0 f4       	brcc	.+56     	; 0xf8e <aplicarTiempo+0xa6>
     f56:	49 81       	ldd	r20, Y+1	; 0x01
     f58:	5a 81       	ldd	r21, Y+2	; 0x02
     f5a:	6b 81       	ldd	r22, Y+3	; 0x03
     f5c:	7c 81       	ldd	r23, Y+4	; 0x04
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	0e 94 54 01 	call	0x2a8	; 0x2a8 <setearTime>
     f66:	13 c0       	rjmp	.+38     	; 0xf8e <aplicarTiempo+0xa6>
							}else if(newTime.date<30) setearTime(newTime);
     f68:	1e 31       	cpi	r17, 0x1E	; 30
     f6a:	88 f4       	brcc	.+34     	; 0xf8e <aplicarTiempo+0xa6>
     f6c:	49 81       	ldd	r20, Y+1	; 0x01
     f6e:	5a 81       	ldd	r21, Y+2	; 0x02
     f70:	6b 81       	ldd	r22, Y+3	; 0x03
     f72:	7c 81       	ldd	r23, Y+4	; 0x04
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	0e 94 54 01 	call	0x2a8	; 0x2a8 <setearTime>
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <aplicarTiempo+0xa6>
						}else setearTime(newTime);
     f7e:	49 81       	ldd	r20, Y+1	; 0x01
     f80:	5a 81       	ldd	r21, Y+2	; 0x02
     f82:	6b 81       	ldd	r22, Y+3	; 0x03
     f84:	7c 81       	ldd	r23, Y+4	; 0x04
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <setearTime>
					}
				}
			}
		}
	}
}
     f8e:	26 96       	adiw	r28, 0x06	; 6
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	08 95       	ret

00000fa2 <fESE>:
		}
	}
}

void fESE(void){
	if(flag==1){
     fa2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	09 f0       	breq	.+2      	; 0xfac <fESE+0xa>
     faa:	8b c0       	rjmp	.+278    	; 0x10c2 <fESE+0x120>
		blanco[5]=' ';
     fac:	80 e2       	ldi	r24, 0x20	; 32
     fae:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <blanco+0x5>
		sEOS_timeBlank(ti,blanco);
     fb2:	20 e3       	ldi	r18, 0x30	; 48
     fb4:	31 e0       	ldi	r19, 0x01	; 1
     fb6:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     fba:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     fbe:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     fc2:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     fc6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
     fca:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
     fce:	0e 94 64 09 	call	0x12c8	; 0x12c8 <sEOS_timeBlank>
		uint8_t tecla = RetornarTecla();
     fd2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <RetornarTecla>
		switch(tecla){
     fd6:	82 34       	cpi	r24, 0x42	; 66
     fd8:	49 f1       	breq	.+82     	; 0x102c <fESE+0x8a>
     fda:	18 f4       	brcc	.+6      	; 0xfe2 <fESE+0x40>
     fdc:	81 34       	cpi	r24, 0x41	; 65
     fde:	39 f0       	breq	.+14     	; 0xfee <fESE+0x4c>
     fe0:	08 95       	ret
     fe2:	83 34       	cpi	r24, 0x43	; 67
     fe4:	d9 f1       	breq	.+118    	; 0x105c <fESE+0xba>
     fe6:	84 34       	cpi	r24, 0x44	; 68
     fe8:	09 f4       	brne	.+2      	; 0xfec <fESE+0x4a>
     fea:	51 c0       	rjmp	.+162    	; 0x108e <fESE+0xec>
     fec:	08 95       	ret
			case 'A':
			aplicarTiempo(ti);
     fee:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
     ff2:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
     ff6:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
     ffa:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
     ffe:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
    1002:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
    1006:	0e 94 74 07 	call	0xee8	; 0xee8 <aplicarTiempo>
			sEOS_time1(ti);
    100a:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
    100e:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
    1012:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
    1016:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
    101a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
    101e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
    1022:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
			estado = INIT;
    1026:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
			break;
    102a:	08 95       	ret
			case 'B':
			ti.second++;
    102c:	e6 e3       	ldi	r30, 0x36	; 54
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	80 81       	ld	r24, Z
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 83       	st	Z, r24
			if(ti.second==60){
    1036:	8c 33       	cpi	r24, 0x3C	; 60
    1038:	11 f4       	brne	.+4      	; 0x103e <fESE+0x9c>
				ti.second=0;
    103a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <ti>
			}
			sEOS_time2(ti);
    103e:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
    1042:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
    1046:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
    104a:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
    104e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
    1052:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
    1056:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
    105a:	08 95       	ret
			case 'C':
			ti.second--;
    105c:	e6 e3       	ldi	r30, 0x36	; 54
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	80 81       	ld	r24, Z
    1062:	81 50       	subi	r24, 0x01	; 1
    1064:	80 83       	st	Z, r24
			if(ti.second==255){
    1066:	8f 3f       	cpi	r24, 0xFF	; 255
    1068:	19 f4       	brne	.+6      	; 0x1070 <fESE+0xce>
				ti.second=59;
    106a:	8b e3       	ldi	r24, 0x3B	; 59
    106c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <ti>
			}
			sEOS_time2(ti);
    1070:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <ti>
    1074:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <ti+0x1>
    1078:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <ti+0x2>
    107c:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <ti+0x3>
    1080:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ti+0x4>
    1084:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ti+0x5>
    1088:	0e 94 43 09 	call	0x1286	; 0x1286 <sEOS_time2>
			break;
    108c:	08 95       	ret
			case 'D':
			ti=obtenerTime();
    108e:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
    1092:	f4 2f       	mov	r31, r20
    1094:	e5 2f       	mov	r30, r21
    1096:	86 2f       	mov	r24, r22
    1098:	97 2f       	mov	r25, r23
    109a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <ti>
    109e:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <ti+0x1>
    10a2:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <ti+0x2>
    10a6:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <ti+0x3>
    10aa:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <ti+0x4>
    10ae:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <ti+0x5>
			sEOS_time1(ti);
    10b2:	42 2f       	mov	r20, r18
    10b4:	53 2f       	mov	r21, r19
    10b6:	6f 2f       	mov	r22, r31
    10b8:	7e 2f       	mov	r23, r30
    10ba:	0e 94 21 09 	call	0x1242	; 0x1242 <sEOS_time1>
			estado = INIT;
    10be:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
    10c2:	08 95       	ret

000010c4 <MEF_Inicializar>:
static time ti;
static uint8_t blanco[6]={0};

	
void MEF_Inicializar(void){
	estado = INIT;
    10c4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <estado>
    10c8:	08 95       	ret

000010ca <MEF_Actualizar>:
}

void MEF_Actualizar(void){
	if (flag)
    10ca:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
    10ce:	88 23       	and	r24, r24
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <MEF_Actualizar+0xe>
		flag=0;
    10d2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <flag>
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <MEF_Actualizar+0x14>
	else
		flag=1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <flag>
	(*MEF_funciones[estado])();
    10de:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <estado>
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e4 5f       	subi	r30, 0xF4	; 244
    10ea:	fe 4f       	sbci	r31, 0xFE	; 254
    10ec:	01 90       	ld	r0, Z+
    10ee:	f0 81       	ld	r31, Z
    10f0:	e0 2d       	mov	r30, r0
    10f2:	09 95       	icall
    10f4:	08 95       	ret

000010f6 <sEOS_Planificador>:

static time tiempo1,tiempo2,tiempoBlanco;
static uint8_t cond=1;

void sEOS_Planificador(void){ 
	if(++contMEF==INIT_MEF){  
    10f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <contMEF>
    10fa:	8f 5f       	subi	r24, 0xFF	; 255
    10fc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <contMEF>
    1100:	8a 30       	cpi	r24, 0x0A	; 10
    1102:	29 f4       	brne	.+10     	; 0x110e <sEOS_Planificador+0x18>
		FlagMEF=1;  
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <FlagMEF>
		contMEF=0;  
    110a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <contMEF>
	}
	if(++contLCD==INIT_LCD){
    110e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <contLCD>
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <contLCD>
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	21 f4       	brne	.+8      	; 0x1124 <sEOS_Planificador+0x2e>
		FlagLCD=1;
    111c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <FlagLCD>
		contLCD=0;
    1120:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <contLCD>
	}
	if(++contKeypad==INIT_KEYPAD){
    1124:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <contKeypad>
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <contKeypad>
    112e:	84 31       	cpi	r24, 0x14	; 20
    1130:	29 f4       	brne	.+10     	; 0x113c <sEOS_Planificador+0x46>
		FlagKeypad=1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <FlagKeypad>
		contKeypad=0;
    1138:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <contKeypad>
	}
	if(++contBlanco==INIT_BLANCO){
    113c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <contBlanco>
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <contBlanco>
    1146:	84 36       	cpi	r24, 0x64	; 100
    1148:	29 f4       	brne	.+10     	; 0x1154 <sEOS_Planificador+0x5e>
		FlagBlanco=1;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <FlagBlanco>
		contBlanco=0;
    1150:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <contBlanco>
    1154:	08 95       	ret

00001156 <sEOS_Despachador>:
	}
}

void sEOS_Despachador(void){ 
	if(FlagKeypad==1){  
    1156:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <FlagKeypad>
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	21 f4       	brne	.+8      	; 0x1166 <sEOS_Despachador+0x10>
		KEYPAD_Actualizar();  
    115e:	0e 94 bf 01 	call	0x37e	; 0x37e <KEYPAD_Actualizar>
		FlagKeypad=0;  
    1162:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <FlagKeypad>
	}
	if(FlagMEF==1){  
    1166:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <FlagMEF>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	21 f4       	brne	.+8      	; 0x1176 <sEOS_Despachador+0x20>
		MEF_Actualizar();  
    116e:	0e 94 65 08 	call	0x10ca	; 0x10ca <MEF_Actualizar>
		FlagMEF=0;  
    1172:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <FlagMEF>
	}
	if((FlagLCD==1)&(cond==1)){
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <FlagLCD>
    117c:	91 30       	cpi	r25, 0x01	; 1
    117e:	09 f0       	breq	.+2      	; 0x1182 <sEOS_Despachador+0x2c>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <cond>
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	21 30       	cpi	r18, 0x01	; 1
    118a:	09 f0       	breq	.+2      	; 0x118e <sEOS_Despachador+0x38>
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	98 23       	and	r25, r24
    1190:	f9 f0       	breq	.+62     	; 0x11d0 <sEOS_Despachador+0x7a>
		LCD_Actualizar(tiempo1);
    1192:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <tiempo1>
    1196:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <tiempo1+0x1>
    119a:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <tiempo1+0x2>
    119e:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <tiempo1+0x3>
    11a2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <tiempo1+0x4>
    11a6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <tiempo1+0x5>
    11aa:	0e 94 34 04 	call	0x868	; 0x868 <LCD_Actualizar>
		FlagLCD=0;
    11ae:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <FlagLCD>
		tiempo1=obtenerTime();
    11b2:	0e 94 33 01 	call	0x266	; 0x266 <obtenerTime>
    11b6:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <tiempo1>
    11ba:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <tiempo1+0x1>
    11be:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <tiempo1+0x2>
    11c2:	50 93 4d 01 	sts	0x014D, r21	; 0x80014d <tiempo1+0x3>
    11c6:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <tiempo1+0x4>
    11ca:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <tiempo1+0x5>
    11ce:	18 c0       	rjmp	.+48     	; 0x1200 <sEOS_Despachador+0xaa>
	}else if((FlagLCD==1)&(cond==0)){
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	21 11       	cpse	r18, r1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	89 23       	and	r24, r25
    11d8:	99 f0       	breq	.+38     	; 0x1200 <sEOS_Despachador+0xaa>
		LCD_Actualizar(tiempo2);
    11da:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <tiempo2>
    11de:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <tiempo2+0x1>
    11e2:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <tiempo2+0x2>
    11e6:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <tiempo2+0x3>
    11ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tiempo2+0x4>
    11ee:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <tiempo2+0x5>
    11f2:	0e 94 34 04 	call	0x868	; 0x868 <LCD_Actualizar>
		FlagLCD=0;
    11f6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <FlagLCD>
		cond = 2;
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cond>
	}
	if((FlagBlanco==1)&(cond==2)){
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <FlagBlanco>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	09 f0       	breq	.+2      	; 0x120c <sEOS_Despachador+0xb6>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <cond>
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	09 f0       	breq	.+2      	; 0x1218 <sEOS_Despachador+0xc2>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	89 23       	and	r24, r25
    121a:	91 f0       	breq	.+36     	; 0x1240 <sEOS_Despachador+0xea>
		LCD_Actualizar(tiempoBlanco);
    121c:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <tiempoBlanco>
    1220:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <tiempoBlanco+0x1>
    1224:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <tiempoBlanco+0x2>
    1228:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <tiempoBlanco+0x3>
    122c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tiempoBlanco+0x4>
    1230:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <tiempoBlanco+0x5>
    1234:	0e 94 34 04 	call	0x868	; 0x868 <LCD_Actualizar>
		FlagBlanco=0;
    1238:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <FlagBlanco>
		cond = 0;
    123c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <cond>
    1240:	08 95       	ret

00001242 <sEOS_time1>:
	}
}



void sEOS_time1(time t){
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	00 d0       	rcall	.+0      	; 0x1248 <sEOS_time1+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <sEOS_time1+0x8>
    124a:	00 d0       	rcall	.+0      	; 0x124c <sEOS_time1+0xa>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	49 83       	std	Y+1, r20	; 0x01
    1252:	5a 83       	std	Y+2, r21	; 0x02
    1254:	6b 83       	std	Y+3, r22	; 0x03
    1256:	7c 83       	std	Y+4, r23	; 0x04
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	9e 83       	std	Y+6, r25	; 0x06
	tiempo1=t;
    125c:	86 e0       	ldi	r24, 0x06	; 6
    125e:	fe 01       	movw	r30, r28
    1260:	31 96       	adiw	r30, 0x01	; 1
    1262:	aa e4       	ldi	r26, 0x4A	; 74
    1264:	b1 e0       	ldi	r27, 0x01	; 1
    1266:	01 90       	ld	r0, Z+
    1268:	0d 92       	st	X+, r0
    126a:	8a 95       	dec	r24
    126c:	e1 f7       	brne	.-8      	; 0x1266 <sEOS_time1+0x24>
	cond=1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cond>
}
    1274:	26 96       	adiw	r28, 0x06	; 6
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <sEOS_time2>:

void sEOS_time2(time t){
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	00 d0       	rcall	.+0      	; 0x128c <sEOS_time2+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <sEOS_time2+0x8>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <sEOS_time2+0xa>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	49 83       	std	Y+1, r20	; 0x01
    1296:	5a 83       	std	Y+2, r21	; 0x02
    1298:	6b 83       	std	Y+3, r22	; 0x03
    129a:	7c 83       	std	Y+4, r23	; 0x04
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	9e 83       	std	Y+6, r25	; 0x06
	tiempo2=t;
    12a0:	86 e0       	ldi	r24, 0x06	; 6
    12a2:	fe 01       	movw	r30, r28
    12a4:	31 96       	adiw	r30, 0x01	; 1
    12a6:	a4 e4       	ldi	r26, 0x44	; 68
    12a8:	b1 e0       	ldi	r27, 0x01	; 1
    12aa:	01 90       	ld	r0, Z+
    12ac:	0d 92       	st	X+, r0
    12ae:	8a 95       	dec	r24
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <sEOS_time2+0x24>
	cond=0;
    12b2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <cond>
}
    12b6:	26 96       	adiw	r28, 0x06	; 6
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <sEOS_timeBlank>:

void sEOS_timeBlank(time t, uint8_t b[]){
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	00 d0       	rcall	.+0      	; 0x12da <sEOS_timeBlank+0x12>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <sEOS_timeBlank+0x14>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <sEOS_timeBlank+0x16>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	49 83       	std	Y+1, r20	; 0x01
    12e4:	5a 83       	std	Y+2, r21	; 0x02
    12e6:	6b 83       	std	Y+3, r22	; 0x03
    12e8:	7c 83       	std	Y+4, r23	; 0x04
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	69 01       	movw	r12, r18
	for (int i = 0; i<6;i++)
    12f0:	00 e0       	ldi	r16, 0x00	; 0
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	94 c0       	rjmp	.+296    	; 0x141e <sEOS_timeBlank+0x156>
	{
		if((i==0) &(b[i]==' ')){
    12f6:	76 01       	movw	r14, r12
    12f8:	e0 0e       	add	r14, r16
    12fa:	f1 1e       	adc	r15, r17
    12fc:	f7 01       	movw	r30, r14
    12fe:	90 81       	ld	r25, Z
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 32       	cpi	r25, 0x20	; 32
    1304:	09 f0       	breq	.+2      	; 0x1308 <sEOS_timeBlank+0x40>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	01 15       	cp	r16, r1
    130c:	11 05       	cpc	r17, r1
    130e:	09 f0       	breq	.+2      	; 0x1312 <sEOS_timeBlank+0x4a>
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	98 23       	and	r25, r24
    1314:	81 f0       	breq	.+32     	; 0x1336 <sEOS_timeBlank+0x6e>
			LCDGotoXY(10,1);
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	8a e0       	ldi	r24, 0x0A	; 10
    131a:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
			LCDsendChar(b[i]);
    131e:	f7 01       	movw	r30, r14
    1320:	80 81       	ld	r24, Z
    1322:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
			LCDsendChar(b[i]);
    1326:	f7 01       	movw	r30, r14
    1328:	80 81       	ld	r24, Z
    132a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
			b[i]='0';
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	f7 01       	movw	r30, r14
    1332:	80 83       	st	Z, r24
    1334:	72 c0       	rjmp	.+228    	; 0x141a <sEOS_timeBlank+0x152>
		}else if((i==1) &(b[i]==' ')){
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	01 30       	cpi	r16, 0x01	; 1
    133a:	11 05       	cpc	r17, r1
    133c:	09 f0       	breq	.+2      	; 0x1340 <sEOS_timeBlank+0x78>
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	98 23       	and	r25, r24
    1342:	81 f0       	breq	.+32     	; 0x1364 <sEOS_timeBlank+0x9c>
				LCDGotoXY(7,1);
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	87 e0       	ldi	r24, 0x07	; 7
    1348:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
				LCDsendChar(b[i]);
    134c:	f7 01       	movw	r30, r14
    134e:	80 81       	ld	r24, Z
    1350:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
				LCDsendChar(b[i]);
    1354:	f7 01       	movw	r30, r14
    1356:	80 81       	ld	r24, Z
    1358:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
				b[i]='0';
    135c:	80 e3       	ldi	r24, 0x30	; 48
    135e:	f7 01       	movw	r30, r14
    1360:	80 83       	st	Z, r24
    1362:	5b c0       	rjmp	.+182    	; 0x141a <sEOS_timeBlank+0x152>
			}else if((i==2) &(b[i]==' ')){
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	02 30       	cpi	r16, 0x02	; 2
    1368:	11 05       	cpc	r17, r1
    136a:	09 f0       	breq	.+2      	; 0x136e <sEOS_timeBlank+0xa6>
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	98 23       	and	r25, r24
    1370:	81 f0       	breq	.+32     	; 0x1392 <sEOS_timeBlank+0xca>
						LCDGotoXY(4,1);
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
						LCDsendChar(b[i]);
    137a:	f7 01       	movw	r30, r14
    137c:	80 81       	ld	r24, Z
    137e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
						LCDsendChar(b[i]);
    1382:	f7 01       	movw	r30, r14
    1384:	80 81       	ld	r24, Z
    1386:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
						b[i]='0';
    138a:	80 e3       	ldi	r24, 0x30	; 48
    138c:	f7 01       	movw	r30, r14
    138e:	80 83       	st	Z, r24
    1390:	44 c0       	rjmp	.+136    	; 0x141a <sEOS_timeBlank+0x152>
				}else if((i==3) &(b[i]==' ')){
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	03 30       	cpi	r16, 0x03	; 3
    1396:	11 05       	cpc	r17, r1
    1398:	09 f0       	breq	.+2      	; 0x139c <sEOS_timeBlank+0xd4>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	98 23       	and	r25, r24
    139e:	81 f0       	breq	.+32     	; 0x13c0 <sEOS_timeBlank+0xf8>
						LCDGotoXY(4,0);
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	84 e0       	ldi	r24, 0x04	; 4
    13a4:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
						LCDsendChar(b[i]);
    13a8:	f7 01       	movw	r30, r14
    13aa:	80 81       	ld	r24, Z
    13ac:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
						LCDsendChar(b[i]);
    13b0:	f7 01       	movw	r30, r14
    13b2:	80 81       	ld	r24, Z
    13b4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
						b[i]='0';
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	f7 01       	movw	r30, r14
    13bc:	80 83       	st	Z, r24
    13be:	2d c0       	rjmp	.+90     	; 0x141a <sEOS_timeBlank+0x152>
						}else if((i==4) &(b[i]==' ')){
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	04 30       	cpi	r16, 0x04	; 4
    13c4:	11 05       	cpc	r17, r1
    13c6:	09 f0       	breq	.+2      	; 0x13ca <sEOS_timeBlank+0x102>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	98 23       	and	r25, r24
    13cc:	81 f0       	breq	.+32     	; 0x13ee <sEOS_timeBlank+0x126>
								LCDGotoXY(7,0);
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	87 e0       	ldi	r24, 0x07	; 7
    13d2:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
								LCDsendChar(b[i]);
    13d6:	f7 01       	movw	r30, r14
    13d8:	80 81       	ld	r24, Z
    13da:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
								LCDsendChar(b[i]);
    13de:	f7 01       	movw	r30, r14
    13e0:	80 81       	ld	r24, Z
    13e2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
								b[i]='0';
    13e6:	80 e3       	ldi	r24, 0x30	; 48
    13e8:	f7 01       	movw	r30, r14
    13ea:	80 83       	st	Z, r24
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <sEOS_timeBlank+0x152>
							}else if((i==5) &(b[i]==' ')){
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	05 30       	cpi	r16, 0x05	; 5
    13f2:	11 05       	cpc	r17, r1
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <sEOS_timeBlank+0x130>
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	89 23       	and	r24, r25
    13fa:	79 f0       	breq	.+30     	; 0x141a <sEOS_timeBlank+0x152>
									LCDGotoXY(10,0);
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	8a e0       	ldi	r24, 0x0A	; 10
    1400:	0e 94 05 03 	call	0x60a	; 0x60a <LCDGotoXY>
									LCDsendChar(b[i]);
    1404:	f7 01       	movw	r30, r14
    1406:	80 81       	ld	r24, Z
    1408:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
									LCDsendChar(b[i]);
    140c:	f7 01       	movw	r30, r14
    140e:	80 81       	ld	r24, Z
    1410:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCDsendChar>
									b[i]='0';
    1414:	80 e3       	ldi	r24, 0x30	; 48
    1416:	f7 01       	movw	r30, r14
    1418:	80 83       	st	Z, r24
	tiempo2=t;
	cond=0;
}

void sEOS_timeBlank(time t, uint8_t b[]){
	for (int i = 0; i<6;i++)
    141a:	0f 5f       	subi	r16, 0xFF	; 255
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	06 30       	cpi	r16, 0x06	; 6
    1420:	11 05       	cpc	r17, r1
    1422:	0c f4       	brge	.+2      	; 0x1426 <sEOS_timeBlank+0x15e>
    1424:	68 cf       	rjmp	.-304    	; 0x12f6 <sEOS_timeBlank+0x2e>
									LCDsendChar(b[i]);
									LCDsendChar(b[i]);
									b[i]='0';
									}
	}
	tiempoBlanco=t;
    1426:	86 e0       	ldi	r24, 0x06	; 6
    1428:	fe 01       	movw	r30, r28
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	ae e3       	ldi	r26, 0x3E	; 62
    142e:	b1 e0       	ldi	r27, 0x01	; 1
    1430:	01 90       	ld	r0, Z+
    1432:	0d 92       	st	X+, r0
    1434:	8a 95       	dec	r24
    1436:	e1 f7       	brne	.-8      	; 0x1430 <sEOS_timeBlank+0x168>
    1438:	26 96       	adiw	r28, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <__divmodhi4>:
    1456:	97 fb       	bst	r25, 7
    1458:	07 2e       	mov	r0, r23
    145a:	16 f4       	brtc	.+4      	; 0x1460 <__divmodhi4+0xa>
    145c:	00 94       	com	r0
    145e:	07 d0       	rcall	.+14     	; 0x146e <__divmodhi4_neg1>
    1460:	77 fd       	sbrc	r23, 7
    1462:	09 d0       	rcall	.+18     	; 0x1476 <__divmodhi4_neg2>
    1464:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodhi4>
    1468:	07 fc       	sbrc	r0, 7
    146a:	05 d0       	rcall	.+10     	; 0x1476 <__divmodhi4_neg2>
    146c:	3e f4       	brtc	.+14     	; 0x147c <__divmodhi4_exit>

0000146e <__divmodhi4_neg1>:
    146e:	90 95       	com	r25
    1470:	81 95       	neg	r24
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	08 95       	ret

00001476 <__divmodhi4_neg2>:
    1476:	70 95       	com	r23
    1478:	61 95       	neg	r22
    147a:	7f 4f       	sbci	r23, 0xFF	; 255

0000147c <__divmodhi4_exit>:
    147c:	08 95       	ret

0000147e <__udivmodhi4>:
    147e:	aa 1b       	sub	r26, r26
    1480:	bb 1b       	sub	r27, r27
    1482:	51 e1       	ldi	r21, 0x11	; 17
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <__udivmodhi4_ep>

00001486 <__udivmodhi4_loop>:
    1486:	aa 1f       	adc	r26, r26
    1488:	bb 1f       	adc	r27, r27
    148a:	a6 17       	cp	r26, r22
    148c:	b7 07       	cpc	r27, r23
    148e:	10 f0       	brcs	.+4      	; 0x1494 <__udivmodhi4_ep>
    1490:	a6 1b       	sub	r26, r22
    1492:	b7 0b       	sbc	r27, r23

00001494 <__udivmodhi4_ep>:
    1494:	88 1f       	adc	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	5a 95       	dec	r21
    149a:	a9 f7       	brne	.-22     	; 0x1486 <__udivmodhi4_loop>
    149c:	80 95       	com	r24
    149e:	90 95       	com	r25
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	08 95       	ret

000014a6 <_exit>:
    14a6:	f8 94       	cli

000014a8 <__stop_program>:
    14a8:	ff cf       	rjmp	.-2      	; 0x14a8 <__stop_program>
